var t=/d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g,e="[^\\s]+",i=/\[([^]*?)\]/gm;function n(t,e){for(var i=[],n=0,o=t.length;n<o;n++)i.push(t[n].substr(0,e));return i}var o=function(t){return function(e,i){var n=i[t].map((function(t){return t.toLowerCase()})).indexOf(e.toLowerCase());return n>-1?n:null}};function r(t){for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];for(var n=0,o=e;n<o.length;n++){var r=o[n];for(var s in r)t[s]=r[s]}return t}var s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],a=["January","February","March","April","May","June","July","August","September","October","November","December"],h=n(a,3),l={dayNamesShort:n(s,3),dayNames:s,monthNamesShort:h,monthNames:a,amPm:["am","pm"],DoFn:function(t){return t+["th","st","nd","rd"][t%10>3?0:(t-t%10!=10?1:0)*t%10]}},c=r({},l),u=function(t,e){for(void 0===e&&(e=2),t=String(t);t.length<e;)t="0"+t;return t},d={D:function(t){return String(t.getDate())},DD:function(t){return u(t.getDate())},Do:function(t,e){return e.DoFn(t.getDate())},d:function(t){return String(t.getDay())},dd:function(t){return u(t.getDay())},ddd:function(t,e){return e.dayNamesShort[t.getDay()]},dddd:function(t,e){return e.dayNames[t.getDay()]},M:function(t){return String(t.getMonth()+1)},MM:function(t){return u(t.getMonth()+1)},MMM:function(t,e){return e.monthNamesShort[t.getMonth()]},MMMM:function(t,e){return e.monthNames[t.getMonth()]},YY:function(t){return u(String(t.getFullYear()),4).substr(2)},YYYY:function(t){return u(t.getFullYear(),4)},h:function(t){return String(t.getHours()%12||12)},hh:function(t){return u(t.getHours()%12||12)},H:function(t){return String(t.getHours())},HH:function(t){return u(t.getHours())},m:function(t){return String(t.getMinutes())},mm:function(t){return u(t.getMinutes())},s:function(t){return String(t.getSeconds())},ss:function(t){return u(t.getSeconds())},S:function(t){return String(Math.round(t.getMilliseconds()/100))},SS:function(t){return u(Math.round(t.getMilliseconds()/10),2)},SSS:function(t){return u(t.getMilliseconds(),3)},a:function(t,e){return t.getHours()<12?e.amPm[0]:e.amPm[1]},A:function(t,e){return t.getHours()<12?e.amPm[0].toUpperCase():e.amPm[1].toUpperCase()},ZZ:function(t){var e=t.getTimezoneOffset();return(e>0?"-":"+")+u(100*Math.floor(Math.abs(e)/60)+Math.abs(e)%60,4)},Z:function(t){var e=t.getTimezoneOffset();return(e>0?"-":"+")+u(Math.floor(Math.abs(e)/60),2)+":"+u(Math.abs(e)%60,2)}},p=function(t){return+t-1},f=[null,"[1-9]\\d?"],g=[null,e],m=["isPm",e,function(t,e){var i=t.toLowerCase();return i===e.amPm[0]?0:i===e.amPm[1]?1:null}],v=["timezoneOffset","[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",function(t){var e=(t+"").match(/([+-]|\d\d)/gi);if(e){var i=60*+e[1]+parseInt(e[2],10);return"+"===e[0]?i:-i}return 0}],b=(o("monthNamesShort"),o("monthNames"),{default:"ddd MMM DD YYYY HH:mm:ss",shortDate:"M/D/YY",mediumDate:"MMM D, YYYY",longDate:"MMMM D, YYYY",fullDate:"dddd, MMMM D, YYYY",isoDate:"YYYY-MM-DD",isoDateTime:"YYYY-MM-DDTHH:mm:ssZ",shortTime:"HH:mm",mediumTime:"HH:mm:ss",longTime:"HH:mm:ss.SSS"});var y=function(e,n,o){if(void 0===n&&(n=b.default),void 0===o&&(o={}),"number"==typeof e&&(e=new Date(e)),"[object Date]"!==Object.prototype.toString.call(e)||isNaN(e.getTime()))throw new Error("Invalid Date pass to format");var s=[];n=(n=b[n]||n).replace(i,(function(t,e){return s.push(e),"@@@"}));var a=r(r({},c),o);return(n=n.replace(t,(function(t){return d[t](e,a)}))).replace(/@@@/g,(function(){return s.shift()}))},x=function(){try{(new Date).toLocaleDateString("i")}catch(t){return"RangeError"===t.name}return!1}()?function(t,e){return t.toLocaleDateString(e,{year:"numeric",month:"long",day:"numeric"})}:function(t){return y(t,"mediumDate")},w=function(){try{(new Date).toLocaleString("i")}catch(t){return"RangeError"===t.name}return!1}()?function(t,e){return t.toLocaleString(e,{year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"2-digit"})}:function(t){return y(t,"haDateTime")},_=function(){try{(new Date).toLocaleTimeString("i")}catch(t){return"RangeError"===t.name}return!1}()?function(t,e){return t.toLocaleTimeString(e,{hour:"numeric",minute:"2-digit"})}:function(t){return y(t,"shortTime")};function S(t){return t.substr(0,t.indexOf("."))}function T(t,e,i){if("unknown"===e.state||"unavailable"===e.state)return t("state.default."+e.state);if(e.attributes.unit_of_measurement)return e.state+" "+e.attributes.unit_of_measurement;var n=function(t){return S(t.entity_id)}(e);if("input_datetime"===n){var o;if(!e.attributes.has_time)return o=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day),x(o,i);if(!e.attributes.has_date){var r=new Date;return o=new Date(r.getFullYear(),r.getMonth(),r.getDay(),e.attributes.hour,e.attributes.minute),_(o,i)}return o=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day,e.attributes.hour,e.attributes.minute),w(o,i)}return e.attributes.device_class&&t("component."+n+".state."+e.attributes.device_class+"."+e.state)||t("component."+n+".state._."+e.state)||e.state}var $=["closed","locked","off"],k=function(t,e,i,n){n=n||{},i=null==i?{}:i;var o=new Event(e,{bubbles:void 0===n.bubbles||n.bubbles,cancelable:Boolean(n.cancelable),composed:void 0===n.composed||n.composed});return o.detail=i,t.dispatchEvent(o),o},z={alert:"hass:alert",automation:"hass:playlist-play",calendar:"hass:calendar",camera:"hass:video",climate:"hass:thermostat",configurator:"hass:settings",conversation:"hass:text-to-speech",device_tracker:"hass:account",fan:"hass:fan",group:"hass:google-circles-communities",history_graph:"hass:chart-line",homeassistant:"hass:home-assistant",homekit:"hass:home-automation",image_processing:"hass:image-filter-frames",input_boolean:"hass:drawing",input_datetime:"hass:calendar-clock",input_number:"hass:ray-vertex",input_select:"hass:format-list-bulleted",input_text:"hass:textbox",light:"hass:lightbulb",mailbox:"hass:mailbox",notify:"hass:comment-alert",person:"hass:account",plant:"hass:flower",proximity:"hass:apple-safari",remote:"hass:remote",scene:"hass:google-pages",script:"hass:file-document",sensor:"hass:eye",simple_alarm:"hass:bell",sun:"hass:white-balance-sunny",switch:"hass:flash",timer:"hass:timer",updater:"hass:cloud-upload",vacuum:"hass:robot-vacuum",water_heater:"hass:thermometer",weblink:"hass:open-in-new"};function E(t,e){if(t in z)return z[t];switch(t){case"alarm_control_panel":switch(e){case"armed_home":return"hass:bell-plus";case"armed_night":return"hass:bell-sleep";case"disarmed":return"hass:bell-outline";case"triggered":return"hass:bell-ring";default:return"hass:bell"}case"binary_sensor":return e&&"off"===e?"hass:radiobox-blank":"hass:checkbox-marked-circle";case"cover":return"closed"===e?"hass:window-closed":"hass:window-open";case"lock":return e&&"unlocked"===e?"hass:lock-open":"hass:lock";case"media_player":return e&&"off"!==e&&"idle"!==e?"hass:cast-connected":"hass:cast";case"zwave":switch(e){case"dead":return"hass:emoticon-dead";case"sleeping":return"hass:sleep";case"initializing":return"hass:timer-sand";default:return"hass:z-wave"}default:return console.warn("Unable to find icon for domain "+t+" ("+e+")"),"hass:bookmark"}}var C=function(t){k(window,"haptic",t)},M=function(t,e){return function(t,e,i){void 0===i&&(i=!0);var n,o=S(e),r="group"===o?"homeassistant":o;switch(o){case"lock":n=i?"unlock":"lock";break;case"cover":n=i?"open_cover":"close_cover";break;default:n=i?"turn_on":"turn_off"}return t.callService(r,n,{entity_id:e})}(t,e,$.includes(t.states[e].state))};function I(t,e){(function(t){return"string"==typeof t&&t.includes(".")&&1===parseFloat(t)})(t)&&(t="100%");var i=function(t){return"string"==typeof t&&t.includes("%")}(t);return t=360===e?t:Math.min(e,Math.max(0,parseFloat(t))),i&&(t=parseInt(String(t*e),10)/100),Math.abs(t-e)<1e-6?1:t=360===e?(t<0?t%e+e:t%e)/parseFloat(String(e)):t%e/parseFloat(String(e))}function P(t){return Math.min(1,Math.max(0,t))}function O(t){return t=parseFloat(t),(isNaN(t)||t<0||t>1)&&(t=1),t}function A(t){return t<=1?100*Number(t)+"%":t}function R(t){return 1===t.length?"0"+t:String(t)}function D(t,e,i){t=I(t,255),e=I(e,255),i=I(i,255);var n=Math.max(t,e,i),o=Math.min(t,e,i),r=0,s=0,a=(n+o)/2;if(n===o)s=0,r=0;else{var h=n-o;switch(s=a>.5?h/(2-n-o):h/(n+o),n){case t:r=(e-i)/h+(e<i?6:0);break;case e:r=(i-t)/h+2;break;case i:r=(t-e)/h+4}r/=6}return{h:r,s:s,l:a}}function H(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*i*(e-t):i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}function N(t,e,i){t=I(t,255),e=I(e,255),i=I(i,255);var n=Math.max(t,e,i),o=Math.min(t,e,i),r=0,s=n,a=n-o,h=0===n?0:a/n;if(n===o)r=0;else{switch(n){case t:r=(e-i)/a+(e<i?6:0);break;case e:r=(i-t)/a+2;break;case i:r=(t-e)/a+4}r/=6}return{h:r,s:h,v:s}}function F(t,e,i,n){var o=[R(Math.round(t).toString(16)),R(Math.round(e).toString(16)),R(Math.round(i).toString(16))];return n&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function L(t){return Math.round(255*parseFloat(t)).toString(16)}function W(t){return Y(t)/255}function Y(t){return parseInt(t,16)}var q={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function B(t){var e={r:0,g:0,b:0},i=1,n=null,o=null,r=null,s=!1,a=!1;return"string"==typeof t&&(t=function(t){if(0===(t=t.trim().toLowerCase()).length)return!1;var e=!1;if(q[t])t=q[t],e=!0;else if("transparent"===t)return{r:0,g:0,b:0,a:0,format:"name"};var i=U.rgb.exec(t);if(i)return{r:i[1],g:i[2],b:i[3]};if(i=U.rgba.exec(t))return{r:i[1],g:i[2],b:i[3],a:i[4]};if(i=U.hsl.exec(t))return{h:i[1],s:i[2],l:i[3]};if(i=U.hsla.exec(t))return{h:i[1],s:i[2],l:i[3],a:i[4]};if(i=U.hsv.exec(t))return{h:i[1],s:i[2],v:i[3]};if(i=U.hsva.exec(t))return{h:i[1],s:i[2],v:i[3],a:i[4]};if(i=U.hex8.exec(t))return{r:Y(i[1]),g:Y(i[2]),b:Y(i[3]),a:W(i[4]),format:e?"name":"hex8"};if(i=U.hex6.exec(t))return{r:Y(i[1]),g:Y(i[2]),b:Y(i[3]),format:e?"name":"hex"};if(i=U.hex4.exec(t))return{r:Y(i[1]+i[1]),g:Y(i[2]+i[2]),b:Y(i[3]+i[3]),a:W(i[4]+i[4]),format:e?"name":"hex8"};if(i=U.hex3.exec(t))return{r:Y(i[1]+i[1]),g:Y(i[2]+i[2]),b:Y(i[3]+i[3]),format:e?"name":"hex"};return!1}(t)),"object"==typeof t&&(X(t.r)&&X(t.g)&&X(t.b)?(e=function(t,e,i){return{r:255*I(t,255),g:255*I(e,255),b:255*I(i,255)}}(t.r,t.g,t.b),s=!0,a="%"===String(t.r).substr(-1)?"prgb":"rgb"):X(t.h)&&X(t.s)&&X(t.v)?(n=A(t.s),o=A(t.v),e=function(t,e,i){t=6*I(t,360),e=I(e,100),i=I(i,100);var n=Math.floor(t),o=t-n,r=i*(1-e),s=i*(1-o*e),a=i*(1-(1-o)*e),h=n%6;return{r:255*[i,s,r,r,a,i][h],g:255*[a,i,i,s,r,r][h],b:255*[r,r,a,i,i,s][h]}}(t.h,n,o),s=!0,a="hsv"):X(t.h)&&X(t.s)&&X(t.l)&&(n=A(t.s),r=A(t.l),e=function(t,e,i){var n,o,r;if(t=I(t,360),e=I(e,100),i=I(i,100),0===e)o=i,r=i,n=i;else{var s=i<.5?i*(1+e):i+e-i*e,a=2*i-s;n=H(a,s,t+1/3),o=H(a,s,t),r=H(a,s,t-1/3)}return{r:255*n,g:255*o,b:255*r}}(t.h,n,r),s=!0,a="hsl"),Object.prototype.hasOwnProperty.call(t,"a")&&(i=t.a)),i=O(i),{ok:s,format:t.format||a,r:Math.min(255,Math.max(e.r,0)),g:Math.min(255,Math.max(e.g,0)),b:Math.min(255,Math.max(e.b,0)),a:i}}var j="(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)",V="[\\s|\\(]+("+j+")[,|\\s]+("+j+")[,|\\s]+("+j+")\\s*\\)?",J="[\\s|\\(]+("+j+")[,|\\s]+("+j+")[,|\\s]+("+j+")[,|\\s]+("+j+")\\s*\\)?",U={CSS_UNIT:new RegExp(j),rgb:new RegExp("rgb"+V),rgba:new RegExp("rgba"+J),hsl:new RegExp("hsl"+V),hsla:new RegExp("hsla"+J),hsv:new RegExp("hsv"+V),hsva:new RegExp("hsva"+J),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function X(t){return Boolean(U.CSS_UNIT.exec(String(t)))}var G=function(){function t(e,i){var n;if(void 0===e&&(e=""),void 0===i&&(i={}),e instanceof t)return e;this.originalInput=e;var o=B(e);this.originalInput=e,this.r=o.r,this.g=o.g,this.b=o.b,this.a=o.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(n=i.format)&&void 0!==n?n:o.format,this.gradientType=i.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=o.ok}return t.prototype.isDark=function(){return this.getBrightness()<128},t.prototype.isLight=function(){return!this.isDark()},t.prototype.getBrightness=function(){var t=this.toRgb();return(299*t.r+587*t.g+114*t.b)/1e3},t.prototype.getLuminance=function(){var t=this.toRgb(),e=t.r/255,i=t.g/255,n=t.b/255;return.2126*(e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4))+.7152*(i<=.03928?i/12.92:Math.pow((i+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))},t.prototype.getAlpha=function(){return this.a},t.prototype.setAlpha=function(t){return this.a=O(t),this.roundA=Math.round(100*this.a)/100,this},t.prototype.toHsv=function(){var t=N(this.r,this.g,this.b);return{h:360*t.h,s:t.s,v:t.v,a:this.a}},t.prototype.toHsvString=function(){var t=N(this.r,this.g,this.b),e=Math.round(360*t.h),i=Math.round(100*t.s),n=Math.round(100*t.v);return 1===this.a?"hsv("+e+", "+i+"%, "+n+"%)":"hsva("+e+", "+i+"%, "+n+"%, "+this.roundA+")"},t.prototype.toHsl=function(){var t=D(this.r,this.g,this.b);return{h:360*t.h,s:t.s,l:t.l,a:this.a}},t.prototype.toHslString=function(){var t=D(this.r,this.g,this.b),e=Math.round(360*t.h),i=Math.round(100*t.s),n=Math.round(100*t.l);return 1===this.a?"hsl("+e+", "+i+"%, "+n+"%)":"hsla("+e+", "+i+"%, "+n+"%, "+this.roundA+")"},t.prototype.toHex=function(t){return void 0===t&&(t=!1),F(this.r,this.g,this.b,t)},t.prototype.toHexString=function(t){return void 0===t&&(t=!1),"#"+this.toHex(t)},t.prototype.toHex8=function(t){return void 0===t&&(t=!1),function(t,e,i,n,o){var r=[R(Math.round(t).toString(16)),R(Math.round(e).toString(16)),R(Math.round(i).toString(16)),R(L(n))];return o&&r[0].startsWith(r[0].charAt(1))&&r[1].startsWith(r[1].charAt(1))&&r[2].startsWith(r[2].charAt(1))&&r[3].startsWith(r[3].charAt(1))?r[0].charAt(0)+r[1].charAt(0)+r[2].charAt(0)+r[3].charAt(0):r.join("")}(this.r,this.g,this.b,this.a,t)},t.prototype.toHex8String=function(t){return void 0===t&&(t=!1),"#"+this.toHex8(t)},t.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},t.prototype.toRgbString=function(){var t=Math.round(this.r),e=Math.round(this.g),i=Math.round(this.b);return 1===this.a?"rgb("+t+", "+e+", "+i+")":"rgba("+t+", "+e+", "+i+", "+this.roundA+")"},t.prototype.toPercentageRgb=function(){var t=function(t){return Math.round(100*I(t,255))+"%"};return{r:t(this.r),g:t(this.g),b:t(this.b),a:this.a}},t.prototype.toPercentageRgbString=function(){var t=function(t){return Math.round(100*I(t,255))};return 1===this.a?"rgb("+t(this.r)+"%, "+t(this.g)+"%, "+t(this.b)+"%)":"rgba("+t(this.r)+"%, "+t(this.g)+"%, "+t(this.b)+"%, "+this.roundA+")"},t.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var t="#"+F(this.r,this.g,this.b,!1),e=0,i=Object.keys(q);e<i.length;e++){var n=i[e];if(q[n]===t)return n}return!1},t.prototype.toString=function(t){var e=Boolean(t);t=null!=t?t:this.format;var i=!1,n=this.a<1&&this.a>=0;return e||!n||!t.startsWith("hex")&&"name"!==t?("rgb"===t&&(i=this.toRgbString()),"prgb"===t&&(i=this.toPercentageRgbString()),"hex"!==t&&"hex6"!==t||(i=this.toHexString()),"hex3"===t&&(i=this.toHexString(!0)),"hex4"===t&&(i=this.toHex8String(!0)),"hex8"===t&&(i=this.toHex8String()),"name"===t&&(i=this.toName()),"hsl"===t&&(i=this.toHslString()),"hsv"===t&&(i=this.toHsvString()),i||this.toHexString()):"name"===t&&0===this.a?this.toName():this.toRgbString()},t.prototype.clone=function(){return new t(this.toString())},t.prototype.lighten=function(e){void 0===e&&(e=10);var i=this.toHsl();return i.l+=e/100,i.l=P(i.l),new t(i)},t.prototype.brighten=function(e){void 0===e&&(e=10);var i=this.toRgb();return i.r=Math.max(0,Math.min(255,i.r-Math.round(-e/100*255))),i.g=Math.max(0,Math.min(255,i.g-Math.round(-e/100*255))),i.b=Math.max(0,Math.min(255,i.b-Math.round(-e/100*255))),new t(i)},t.prototype.darken=function(e){void 0===e&&(e=10);var i=this.toHsl();return i.l-=e/100,i.l=P(i.l),new t(i)},t.prototype.tint=function(t){return void 0===t&&(t=10),this.mix("white",t)},t.prototype.shade=function(t){return void 0===t&&(t=10),this.mix("black",t)},t.prototype.desaturate=function(e){void 0===e&&(e=10);var i=this.toHsl();return i.s-=e/100,i.s=P(i.s),new t(i)},t.prototype.saturate=function(e){void 0===e&&(e=10);var i=this.toHsl();return i.s+=e/100,i.s=P(i.s),new t(i)},t.prototype.greyscale=function(){return this.desaturate(100)},t.prototype.spin=function(e){var i=this.toHsl(),n=(i.h+e)%360;return i.h=n<0?360+n:n,new t(i)},t.prototype.mix=function(e,i){void 0===i&&(i=50);var n=this.toRgb(),o=new t(e).toRgb(),r=i/100;return new t({r:(o.r-n.r)*r+n.r,g:(o.g-n.g)*r+n.g,b:(o.b-n.b)*r+n.b,a:(o.a-n.a)*r+n.a})},t.prototype.analogous=function(e,i){void 0===e&&(e=6),void 0===i&&(i=30);var n=this.toHsl(),o=360/i,r=[this];for(n.h=(n.h-(o*e>>1)+720)%360;--e;)n.h=(n.h+o)%360,r.push(new t(n));return r},t.prototype.complement=function(){var e=this.toHsl();return e.h=(e.h+180)%360,new t(e)},t.prototype.monochromatic=function(e){void 0===e&&(e=6);for(var i=this.toHsv(),n=i.h,o=i.s,r=i.v,s=[],a=1/e;e--;)s.push(new t({h:n,s:o,v:r})),r=(r+a)%1;return s},t.prototype.splitcomplement=function(){var e=this.toHsl(),i=e.h;return[this,new t({h:(i+72)%360,s:e.s,l:e.l}),new t({h:(i+216)%360,s:e.s,l:e.l})]},t.prototype.triad=function(){return this.polyad(3)},t.prototype.tetrad=function(){return this.polyad(4)},t.prototype.polyad=function(e){for(var i=this.toHsl(),n=i.h,o=[this],r=360/e,s=1;s<e;s++)o.push(new t({h:(n+s*r)%360,s:i.s,l:i.l}));return o},t.prototype.equals=function(e){return this.toRgbString()===new t(e).toRgbString()},t}();function Z(t,e){return void 0===t&&(t=""),void 0===e&&(e={}),new G(t,e)}const Q=customElements.get("home-assistant-main")?Object.getPrototypeOf(customElements.get("home-assistant-main")):Object.getPrototypeOf(customElements.get("hui-view")),K=Q.prototype.html,tt=Q.prototype.css;function et(){return document.querySelector("hc-main")?document.querySelector("hc-main").hass:document.querySelector("home-assistant")?document.querySelector("home-assistant").hass:void 0}function it(t,e,i=null){if((t=new Event(t,{bubbles:!0,cancelable:!1,composed:!0})).detail=e||{},i)i.dispatchEvent(t);else{var n=function(){var t=document.querySelector("hc-main");return t=t?(t=(t=(t=t&&t.shadowRoot)&&t.querySelector("hc-lovelace"))&&t.shadowRoot)&&t.querySelector("hui-view")||t.querySelector("hui-panel-view"):(t=(t=(t=(t=(t=(t=(t=(t=(t=(t=(t=(t=document.querySelector("home-assistant"))&&t.shadowRoot)&&t.querySelector("home-assistant-main"))&&t.shadowRoot)&&t.querySelector("app-drawer-layout partial-panel-resolver"))&&t.shadowRoot||t)&&t.querySelector("ha-panel-lovelace"))&&t.shadowRoot)&&t.querySelector("hui-root"))&&t.shadowRoot)&&t.querySelector("ha-app-layout"))&&t.querySelector("#view"))&&t.firstElementChild}();n&&n.dispatchEvent(t)}}async function nt(t,e,i=!1){let n=t;"string"==typeof e&&(e=e.split(/(\$| )/)),""===e[e.length-1]&&e.pop();for(const[t,o]of e.entries())if(o.trim().length){if(!n)return null;n.localName&&n.localName.includes("-")&&await customElements.whenDefined(n.localName),n.updateComplete&&await n.updateComplete,n="$"===o?i&&t==e.length-1?[n.shadowRoot]:n.shadowRoot:i&&t==e.length-1?n.querySelectorAll(o):n.querySelector(o)}return n}async function ot(t,e=!1){const i=document.querySelector("hc-main")||document.querySelector("home-assistant");it("hass-more-info",{entityId:t},i);const n=await async function(t,e,i=!1,n=1e4){return Promise.race([nt(t,e,i),new Promise((t,e)=>setTimeout(()=>e(new Error("timeout")),n))]).catch(t=>{if(!t.message||"timeout"!==t.message)throw t;return null})}(i,"$ ha-more-info-dialog");return n&&(n.large=e),n}const rt="lovelace-player-device-id";function st(){if(!localStorage[rt]){const t=()=>Math.floor(1e5*(1+Math.random())).toString(16).substring(1);window.fully&&"function"==typeof fully.getDeviceId?localStorage[rt]=fully.getDeviceId():localStorage[rt]=`${t()}${t()}-${t()}${t()}`}return localStorage[rt]}let at=st();const ht=new URLSearchParams(window.location.search);var lt;ht.get("deviceID")&&null!==(lt=ht.get("deviceID"))&&("clear"===lt?localStorage.removeItem(rt):localStorage[rt]=lt,at=st());let ct=window.cardHelpers;const ut=new Promise(async(t,e)=>{ct&&t();const i=async()=>{ct=await window.loadCardHelpers(),window.cardHelpers=ct,t()};window.loadCardHelpers?i():window.addEventListener("load",async()=>{!async function(){if(customElements.get("hui-view"))return!0;await customElements.whenDefined("partial-panel-resolver");const t=document.createElement("partial-panel-resolver");if(t.hass={panels:[{url_path:"tmp",component_name:"lovelace"}]},t._updateRoutes(),await t.routerOptions.routes.tmp.load(),!customElements.get("ha-panel-lovelace"))return!1;const e=document.createElement("ha-panel-lovelace");e.hass=et(),void 0===e.hass&&(await new Promise(t=>{window.addEventListener("connection-status",e=>{console.log(e),t()},{once:!0})}),e.hass=et()),e.panel={config:{mode:null}},e._fetchConfig()}(),window.loadCardHelpers&&i()})});function dt(t,e){const i={type:"error",error:t,origConfig:e},n=document.createElement("hui-error-card");return customElements.whenDefined("hui-error-card").then(()=>{const t=document.createElement("hui-error-card");t.setConfig(i),n.parentElement&&n.parentElement.replaceChild(t,n)}),ut.then(()=>{it("ll-rebuild",{},n)}),n}function pt(t,e){if(!e||"object"!=typeof e||!e.type)return dt(`No ${t} type configured`,e);let i=e.type;if(i=i.startsWith("custom:")?i.substr("custom:".length):`hui-${i}-${t}`,customElements.get(i))return function(t,e){let i=document.createElement(t);try{i.setConfig(JSON.parse(JSON.stringify(e)))}catch(t){i=dt(t,e)}return ut.then(()=>{it("ll-rebuild",{},i)}),i}(i,e);const n=dt(`Custom element doesn't exist: ${i}.`,e);n.style.display="None";const o=setTimeout(()=>{n.style.display=""},2e3);return customElements.whenDefined(i).then(()=>{clearTimeout(o),it("ll-rebuild",{},n)}),n}var ft="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function gt(t,e){return t(e={exports:{}},e.exports),e.exports}gt((function(t){
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(e,i,n,o){var r,s=["","webkit","Moz","MS","ms","o"],a=i.createElement("div"),h=Math.round,l=Math.abs,c=Date.now;function u(t,e,i){return setTimeout(b(t,i),e)}function d(t,e,i){return!!Array.isArray(t)&&(p(t,i[e],i),!0)}function p(t,e,i){var n;if(t)if(t.forEach)t.forEach(e,i);else if(void 0!==t.length)for(n=0;n<t.length;)e.call(i,t[n],n,t),n++;else for(n in t)t.hasOwnProperty(n)&&e.call(i,t[n],n,t)}function f(t,i,n){var o="DEPRECATED METHOD: "+i+"\n"+n+" AT \n";return function(){var i=new Error("get-stack-trace"),n=i&&i.stack?i.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",r=e.console&&(e.console.warn||e.console.log);return r&&r.call(e.console,o,n),t.apply(this,arguments)}}r="function"!=typeof Object.assign?function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var o in n)n.hasOwnProperty(o)&&(e[o]=n[o])}return e}:Object.assign;var g=f((function(t,e,i){for(var n=Object.keys(e),o=0;o<n.length;)(!i||i&&void 0===t[n[o]])&&(t[n[o]]=e[n[o]]),o++;return t}),"extend","Use `assign`."),m=f((function(t,e){return g(t,e,!0)}),"merge","Use `assign`.");function v(t,e,i){var n,o=e.prototype;(n=t.prototype=Object.create(o)).constructor=t,n._super=o,i&&r(n,i)}function b(t,e){return function(){return t.apply(e,arguments)}}function y(t,e){return"function"==typeof t?t.apply(e&&e[0]||void 0,e):t}function x(t,e){return void 0===t?e:t}function w(t,e,i){p($(e),(function(e){t.addEventListener(e,i,!1)}))}function _(t,e,i){p($(e),(function(e){t.removeEventListener(e,i,!1)}))}function S(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function T(t,e){return t.indexOf(e)>-1}function $(t){return t.trim().split(/\s+/g)}function k(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var n=0;n<t.length;){if(i&&t[n][i]==e||!i&&t[n]===e)return n;n++}return-1}function z(t){return Array.prototype.slice.call(t,0)}function E(t,e,i){for(var n=[],o=[],r=0;r<t.length;){var s=e?t[r][e]:t[r];k(o,s)<0&&n.push(t[r]),o[r]=s,r++}return i&&(n=e?n.sort((function(t,i){return t[e]>i[e]})):n.sort()),n}function C(t,e){for(var i,n,o=e[0].toUpperCase()+e.slice(1),r=0;r<s.length;){if((n=(i=s[r])?i+o:e)in t)return n;r++}}var M=1;function I(t){var i=t.ownerDocument||t;return i.defaultView||i.parentWindow||e}var P="ontouchstart"in e,O=void 0!==C(e,"PointerEvent"),A=P&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),R=["x","y"],D=["clientX","clientY"];function H(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){y(t.options.enable,[t])&&i.handler(e)},this.init()}function N(t,e,i){var n=i.pointers.length,o=i.changedPointers.length,r=1&e&&n-o==0,s=12&e&&n-o==0;i.isFirst=!!r,i.isFinal=!!s,r&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,n=e.pointers,o=n.length;i.firstInput||(i.firstInput=F(e));o>1&&!i.firstMultiple?i.firstMultiple=F(e):1===o&&(i.firstMultiple=!1);var r=i.firstInput,s=i.firstMultiple,a=s?s.center:r.center,h=e.center=L(n);e.timeStamp=c(),e.deltaTime=e.timeStamp-r.timeStamp,e.angle=B(a,h),e.distance=q(a,h),function(t,e){var i=e.center,n=t.offsetDelta||{},o=t.prevDelta||{},r=t.prevInput||{};1!==e.eventType&&4!==r.eventType||(o=t.prevDelta={x:r.deltaX||0,y:r.deltaY||0},n=t.offsetDelta={x:i.x,y:i.y});e.deltaX=o.x+(i.x-n.x),e.deltaY=o.y+(i.y-n.y)}(i,e),e.offsetDirection=Y(e.deltaX,e.deltaY);var u=W(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=u.x,e.overallVelocityY=u.y,e.overallVelocity=l(u.x)>l(u.y)?u.x:u.y,e.scale=s?(d=s.pointers,p=n,q(p[0],p[1],D)/q(d[0],d[1],D)):1,e.rotation=s?function(t,e){return B(e[1],e[0],D)+B(t[1],t[0],D)}(s.pointers,n):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,n,o,r,s=t.lastInterval||e,a=e.timeStamp-s.timeStamp;if(8!=e.eventType&&(a>25||void 0===s.velocity)){var h=e.deltaX-s.deltaX,c=e.deltaY-s.deltaY,u=W(a,h,c);n=u.x,o=u.y,i=l(u.x)>l(u.y)?u.x:u.y,r=Y(h,c),t.lastInterval=e}else i=s.velocity,n=s.velocityX,o=s.velocityY,r=s.direction;e.velocity=i,e.velocityX=n,e.velocityY=o,e.direction=r}(i,e);var d,p;var f=t.element;S(e.srcEvent.target,f)&&(f=e.srcEvent.target);e.target=f}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function F(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:h(t.pointers[i].clientX),clientY:h(t.pointers[i].clientY)},i++;return{timeStamp:c(),pointers:e,center:L(e),deltaX:t.deltaX,deltaY:t.deltaY}}function L(t){var e=t.length;if(1===e)return{x:h(t[0].clientX),y:h(t[0].clientY)};for(var i=0,n=0,o=0;o<e;)i+=t[o].clientX,n+=t[o].clientY,o++;return{x:h(i/e),y:h(n/e)}}function W(t,e,i){return{x:e/t||0,y:i/t||0}}function Y(t,e){return t===e?1:l(t)>=l(e)?t<0?2:4:e<0?8:16}function q(t,e,i){i||(i=R);var n=e[i[0]]-t[i[0]],o=e[i[1]]-t[i[1]];return Math.sqrt(n*n+o*o)}function B(t,e,i){i||(i=R);var n=e[i[0]]-t[i[0]],o=e[i[1]]-t[i[1]];return 180*Math.atan2(o,n)/Math.PI}H.prototype={handler:function(){},init:function(){this.evEl&&w(this.element,this.evEl,this.domHandler),this.evTarget&&w(this.target,this.evTarget,this.domHandler),this.evWin&&w(I(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&_(this.element,this.evEl,this.domHandler),this.evTarget&&_(this.target,this.evTarget,this.domHandler),this.evWin&&_(I(this.element),this.evWin,this.domHandler)}};var j={mousedown:1,mousemove:2,mouseup:4};function V(){this.evEl="mousedown",this.evWin="mousemove mouseup",this.pressed=!1,H.apply(this,arguments)}v(V,H,{handler:function(t){var e=j[t.type];1&e&&0===t.button&&(this.pressed=!0),2&e&&1!==t.which&&(e=4),this.pressed&&(4&e&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var J={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8},U={2:"touch",3:"pen",4:"mouse",5:"kinect"},X="pointerdown",G="pointermove pointerup pointercancel";function Z(){this.evEl=X,this.evWin=G,H.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}e.MSPointerEvent&&!e.PointerEvent&&(X="MSPointerDown",G="MSPointerMove MSPointerUp MSPointerCancel"),v(Z,H,{handler:function(t){var e=this.store,i=!1,n=t.type.toLowerCase().replace("ms",""),o=J[n],r=U[t.pointerType]||t.pointerType,s="touch"==r,a=k(e,t.pointerId,"pointerId");1&o&&(0===t.button||s)?a<0&&(e.push(t),a=e.length-1):12&o&&(i=!0),a<0||(e[a]=t,this.callback(this.manager,o,{pointers:e,changedPointers:[t],pointerType:r,srcEvent:t}),i&&e.splice(a,1))}});var Q={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function K(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,H.apply(this,arguments)}function tt(t,e){var i=z(t.touches),n=z(t.changedTouches);return 12&e&&(i=E(i.concat(n),"identifier",!0)),[i,n]}v(K,H,{handler:function(t){var e=Q[t.type];if(1===e&&(this.started=!0),this.started){var i=tt.call(this,t,e);12&e&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var et={touchstart:1,touchmove:2,touchend:4,touchcancel:8};function it(){this.evTarget="touchstart touchmove touchend touchcancel",this.targetIds={},H.apply(this,arguments)}function nt(t,e){var i=z(t.touches),n=this.targetIds;if(3&e&&1===i.length)return n[i[0].identifier]=!0,[i,i];var o,r,s=z(t.changedTouches),a=[],h=this.target;if(r=i.filter((function(t){return S(t.target,h)})),1===e)for(o=0;o<r.length;)n[r[o].identifier]=!0,o++;for(o=0;o<s.length;)n[s[o].identifier]&&a.push(s[o]),12&e&&delete n[s[o].identifier],o++;return a.length?[E(r.concat(a),"identifier",!0),a]:void 0}v(it,H,{handler:function(t){var e=et[t.type],i=nt.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});function ot(){H.apply(this,arguments);var t=b(this.handler,this);this.touch=new it(this.manager,t),this.mouse=new V(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function rt(t,e){1&t?(this.primaryTouch=e.changedPointers[0].identifier,st.call(this,e)):12&t&&st.call(this,e)}function st(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var n=this.lastTouches;setTimeout((function(){var t=n.indexOf(i);t>-1&&n.splice(t,1)}),2500)}}function at(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,n=0;n<this.lastTouches.length;n++){var o=this.lastTouches[n],r=Math.abs(e-o.x),s=Math.abs(i-o.y);if(r<=25&&s<=25)return!0}return!1}v(ot,H,{handler:function(t,e,i){var n="touch"==i.pointerType,o="mouse"==i.pointerType;if(!(o&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(n)rt.call(this,e,i);else if(o&&at.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var ht=C(a.style,"touchAction"),lt=void 0!==ht,ct=function(){if(!lt)return!1;var t={},i=e.CSS&&e.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach((function(n){t[n]=!i||e.CSS.supports("touch-action",n)})),t}();function ut(t,e){this.manager=t,this.set(e)}ut.prototype={set:function(t){"compute"==t&&(t=this.compute()),lt&&this.manager.element.style&&ct[t]&&(this.manager.element.style[ht]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return p(this.manager.recognizers,(function(e){y(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))})),function(t){if(T(t,"none"))return"none";var e=T(t,"pan-x"),i=T(t,"pan-y");if(e&&i)return"none";if(e||i)return e?"pan-x":"pan-y";if(T(t,"manipulation"))return"manipulation";return"auto"}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var n=this.actions,o=T(n,"none")&&!ct.none,r=T(n,"pan-y")&&!ct["pan-y"],s=T(n,"pan-x")&&!ct["pan-x"];if(o){var a=1===t.pointers.length,h=t.distance<2,l=t.deltaTime<250;if(a&&h&&l)return}if(!s||!r)return o||r&&6&i||s&&24&i?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};function dt(t){this.options=r({},this.defaults,t||{}),this.id=M++,this.manager=null,this.options.enable=x(this.options.enable,!0),this.state=1,this.simultaneous={},this.requireFail=[]}function pt(t){return 16&t?"cancel":8&t?"end":4&t?"move":2&t?"start":""}function ft(t){return 16==t?"down":8==t?"up":2==t?"left":4==t?"right":""}function gt(t,e){var i=e.manager;return i?i.get(t):t}function mt(){dt.apply(this,arguments)}function vt(){mt.apply(this,arguments),this.pX=null,this.pY=null}function bt(){mt.apply(this,arguments)}function yt(){dt.apply(this,arguments),this._timer=null,this._input=null}function xt(){mt.apply(this,arguments)}function wt(){mt.apply(this,arguments)}function _t(){dt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function St(t,e){return(e=e||{}).recognizers=x(e.recognizers,St.defaults.preset),new Tt(t,e)}dt.prototype={defaults:{},set:function(t){return r(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(d(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=gt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return d(t,"dropRecognizeWith",this)||(t=gt(t,this),delete this.simultaneous[t.id]),this},requireFailure:function(t){if(d(t,"requireFailure",this))return this;var e=this.requireFail;return-1===k(e,t=gt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(d(t,"dropRequireFailure",this))return this;t=gt(t,this);var e=k(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function n(i){e.manager.emit(i,t)}i<8&&n(e.options.event+pt(i)),n(e.options.event),t.additionalEvent&&n(t.additionalEvent),i>=8&&n(e.options.event+pt(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(33&this.requireFail[t].state))return!1;t++}return!0},recognize:function(t){var e=r({},t);if(!y(this.options.enable,[this,e]))return this.reset(),void(this.state=32);56&this.state&&(this.state=1),this.state=this.process(e),30&this.state&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},v(mt,dt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,n=6&e,o=this.attrTest(t);return n&&(8&i||!o)?16|e:n||o?4&i?8|e:2&e?4|e:2:32}}),v(vt,mt,{defaults:{event:"pan",threshold:10,pointers:1,direction:30},getTouchAction:function(){var t=this.options.direction,e=[];return 6&t&&e.push("pan-y"),24&t&&e.push("pan-x"),e},directionTest:function(t){var e=this.options,i=!0,n=t.distance,o=t.direction,r=t.deltaX,s=t.deltaY;return o&e.direction||(6&e.direction?(o=0===r?1:r<0?2:4,i=r!=this.pX,n=Math.abs(t.deltaX)):(o=0===s?1:s<0?8:16,i=s!=this.pY,n=Math.abs(t.deltaY))),t.direction=o,i&&n>e.threshold&&o&e.direction},attrTest:function(t){return mt.prototype.attrTest.call(this,t)&&(2&this.state||!(2&this.state)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=ft(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),v(bt,mt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||2&this.state)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),v(yt,dt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return["auto"]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,o=t.deltaTime>e.time;if(this._input=t,!n||!i||12&t.eventType&&!o)this.reset();else if(1&t.eventType)this.reset(),this._timer=u((function(){this.state=8,this.tryEmit()}),e.time,this);else if(4&t.eventType)return 8;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){8===this.state&&(t&&4&t.eventType?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=c(),this.manager.emit(this.options.event,this._input)))}}),v(xt,mt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return["none"]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||2&this.state)}}),v(wt,mt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:30,pointers:1},getTouchAction:function(){return vt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return 30&i?e=t.overallVelocity:6&i?e=t.overallVelocityX:24&i&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&l(e)>this.options.velocity&&4&t.eventType},emit:function(t){var e=ft(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),v(_t,dt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return["manipulation"]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,n=t.distance<e.threshold,o=t.deltaTime<e.time;if(this.reset(),1&t.eventType&&0===this.count)return this.failTimeout();if(n&&o&&i){if(4!=t.eventType)return this.failTimeout();var r=!this.pTime||t.timeStamp-this.pTime<e.interval,s=!this.pCenter||q(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,s&&r?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=u((function(){this.state=8,this.tryEmit()}),e.interval,this),2):8}return 32},failTimeout:function(){return this._timer=u((function(){this.state=32}),this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){8==this.state&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),St.VERSION="2.0.7",St.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[xt,{enable:!1}],[bt,{enable:!1},["rotate"]],[wt,{direction:6}],[vt,{direction:6},["swipe"]],[_t],[_t,{event:"doubletap",taps:2},["tap"]],[yt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function Tt(t,e){var i;this.options=r({},St.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(O?Z:A?it:P?ot:V))(i,N),this.touchAction=new ut(this,this.options.touchAction),$t(this,!0),p(this.options.recognizers,(function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])}),this)}function $t(t,e){var i,n=t.element;n.style&&(p(t.options.cssProps,(function(o,r){i=C(n.style,r),e?(t.oldCssProps[i]=n.style[i],n.style[i]=o):n.style[i]=t.oldCssProps[i]||""})),e||(t.oldCssProps={}))}Tt.prototype={set:function(t){return r(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var n=this.recognizers,o=e.curRecognizer;(!o||o&&8&o.state)&&(o=e.curRecognizer=null);for(var r=0;r<n.length;)i=n[r],2===e.stopped||o&&i!=o&&!i.canRecognizeWith(o)?i.reset():i.recognize(t),!o&&14&i.state&&(o=e.curRecognizer=i),r++}},get:function(t){if(t instanceof dt)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(d(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(d(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=k(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(void 0!==t&&void 0!==e){var i=this.handlers;return p($(t),(function(t){i[t]=i[t]||[],i[t].push(e)})),this}},off:function(t,e){if(void 0!==t){var i=this.handlers;return p($(t),(function(t){e?i[t]&&i[t].splice(k(i[t],e),1):delete i[t]})),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var n=i.createEvent("Event");n.initEvent(t,!0,!0),n.gesture=e,e.target.dispatchEvent(n)}(t,e);var n=this.handlers[t]&&this.handlers[t].slice();if(n&&n.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var o=0;o<n.length;)n[o](e),o++}},destroy:function(){this.element&&$t(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},r(St,{INPUT_START:1,INPUT_MOVE:2,INPUT_END:4,INPUT_CANCEL:8,STATE_POSSIBLE:1,STATE_BEGAN:2,STATE_CHANGED:4,STATE_ENDED:8,STATE_RECOGNIZED:8,STATE_CANCELLED:16,STATE_FAILED:32,DIRECTION_NONE:1,DIRECTION_LEFT:2,DIRECTION_RIGHT:4,DIRECTION_UP:8,DIRECTION_DOWN:16,DIRECTION_HORIZONTAL:6,DIRECTION_VERTICAL:24,DIRECTION_ALL:30,Manager:Tt,Input:H,TouchAction:ut,TouchInput:it,MouseInput:V,PointerEventInput:Z,TouchMouseInput:ot,SingleTouchInput:K,Recognizer:dt,AttrRecognizer:mt,Tap:_t,Pan:vt,Swipe:wt,Pinch:bt,Rotate:xt,Press:yt,on:w,off:_,each:p,merge:m,extend:g,assign:r,inherit:v,bindFn:b,prefixed:C}),(void 0!==e?e:"undefined"!=typeof self?self:{}).Hammer=St,t.exports?t.exports=St:e.Hammer=St}(window,document)}));var mt=gt((function(t){!function(e,i){t.exports?t.exports=i():e.EvEmitter=i()}("undefined"!=typeof window?window:ft,(function(){function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],o=0;o<i.length;o++){var r=i[o];n&&n[r]&&(this.off(t,r),delete n[r]),r.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t}))})),vt=gt((function(t){
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */
!function(e,i){t.exports?t.exports=i():e.getSize=i()}(window,(function(){function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},i=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],n=i.length;function o(t){var i=getComputedStyle(t);return i||e("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),i}var r,s=!1;function a(e){if(function(){if(!s){s=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var n=o(e);r=200==Math.round(t(n.width)),a.isBoxSizeOuter=r,i.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var h=o(e);if("none"==h.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<n;e++){t[i[e]]=0}return t}();var l={};l.width=e.offsetWidth,l.height=e.offsetHeight;for(var c=l.isBorderBox="border-box"==h.boxSizing,u=0;u<n;u++){var d=i[u],p=h[d],f=parseFloat(p);l[d]=isNaN(f)?0:f}var g=l.paddingLeft+l.paddingRight,m=l.paddingTop+l.paddingBottom,v=l.marginLeft+l.marginRight,b=l.marginTop+l.marginBottom,y=l.borderLeftWidth+l.borderRightWidth,x=l.borderTopWidth+l.borderBottomWidth,w=c&&r,_=t(h.width);!1!==_&&(l.width=_+(w?0:g+y));var S=t(h.height);return!1!==S&&(l.height=S+(w?0:m+x)),l.innerWidth=l.width-(g+y),l.innerHeight=l.height-(m+x),l.outerWidth=l.width+v,l.outerHeight=l.height+b,l}}return a}))})),bt=gt((function(t){!function(e,i){t.exports?t.exports=i():e.matchesSelector=i()}(window,(function(){var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(e,i){return e[t](i)}}))})),yt=gt((function(t){!function(e,i){t.exports?t.exports=i(e,bt):e.fizzyUIUtils=i(e,e.matchesSelector)}(window,(function(t,e){var i={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},n=Array.prototype.slice;i.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?n.call(t):[t]},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var o=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(n){e(t,n)&&o.push(t);for(var i=t.querySelectorAll(n),r=0;r<i.length;r++)o.push(i[r])}else o.push(t)})),o},i.debounceMethod=function(t,e,i){i=i||100;var n=t.prototype[e],o=e+"Timeout";t.prototype[e]=function(){var t=this[o];clearTimeout(t);var e=arguments,r=this;this[o]=setTimeout((function(){n.apply(r,e),delete r[o]}),i)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,i){return e+"-"+i})).toLowerCase()};var o=t.console;return i.htmlInit=function(e,n){i.docReady((function(){var r=i.toDashed(n),s="data-"+r,a=document.querySelectorAll("["+s+"]"),h=document.querySelectorAll(".js-"+r),l=i.makeArray(a).concat(i.makeArray(h)),c=s+"-options",u=t.jQuery;l.forEach((function(t){var i,r=t.getAttribute(s)||t.getAttribute(c);try{i=r&&JSON.parse(r)}catch(e){return void(o&&o.error("Error parsing "+s+" on "+t.className+": "+e))}var a=new e(t,i);u&&u.data(t,n,a)}))}))},i}))})),xt=gt((function(t){!function(e,i){t.exports?t.exports=i(mt,vt):(e.Outlayer={},e.Outlayer.Item=i(e.EvEmitter,e.getSize))}(window,(function(t,e){var i=document.documentElement.style,n="string"==typeof i.transition?"transition":"WebkitTransition",o="string"==typeof i.transform?"transform":"WebkitTransform",r={WebkitTransition:"webkitTransitionEnd",transition:"transitionend"}[n],s={transform:o,transition:n,transitionDuration:n+"Duration",transitionProperty:n+"Property",transitionDelay:n+"Delay"};function a(t,e){t&&(this.element=t,this.layout=e,this.position={x:0,y:0},this._create())}var h=a.prototype=Object.create(t.prototype);h.constructor=a,h._create=function(){this._transn={ingProperties:{},clean:{},onEnd:{}},this.css({position:"absolute"})},h.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},h.getSize=function(){this.size=e(this.element)},h.css=function(t){var e=this.element.style;for(var i in t){e[s[i]||i]=t[i]}},h.getPosition=function(){var t=getComputedStyle(this.element),e=this.layout._getOption("originLeft"),i=this.layout._getOption("originTop"),n=t[e?"left":"right"],o=t[i?"top":"bottom"],r=parseFloat(n),s=parseFloat(o),a=this.layout.size;-1!=n.indexOf("%")&&(r=r/100*a.width),-1!=o.indexOf("%")&&(s=s/100*a.height),r=isNaN(r)?0:r,s=isNaN(s)?0:s,r-=e?a.paddingLeft:a.paddingRight,s-=i?a.paddingTop:a.paddingBottom,this.position.x=r,this.position.y=s},h.layoutPosition=function(){var t=this.layout.size,e={},i=this.layout._getOption("originLeft"),n=this.layout._getOption("originTop"),o=i?"paddingLeft":"paddingRight",r=i?"left":"right",s=i?"right":"left",a=this.position.x+t[o];e[r]=this.getXValue(a),e[s]="";var h=n?"paddingTop":"paddingBottom",l=n?"top":"bottom",c=n?"bottom":"top",u=this.position.y+t[h];e[l]=this.getYValue(u),e[c]="",this.css(e),this.emitEvent("layout",[this])},h.getXValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&!e?t/this.layout.size.width*100+"%":t+"px"},h.getYValue=function(t){var e=this.layout._getOption("horizontal");return this.layout.options.percentPosition&&e?t/this.layout.size.height*100+"%":t+"px"},h._transitionTo=function(t,e){this.getPosition();var i=this.position.x,n=this.position.y,o=t==this.position.x&&e==this.position.y;if(this.setPosition(t,e),!o||this.isTransitioning){var r=t-i,s=e-n,a={};a.transform=this.getTranslate(r,s),this.transition({to:a,onTransitionEnd:{transform:this.layoutPosition},isCleaning:!0})}else this.layoutPosition()},h.getTranslate=function(t,e){return"translate3d("+(t=this.layout._getOption("originLeft")?t:-t)+"px, "+(e=this.layout._getOption("originTop")?e:-e)+"px, 0)"},h.goTo=function(t,e){this.setPosition(t,e),this.layoutPosition()},h.moveTo=h._transitionTo,h.setPosition=function(t,e){this.position.x=parseFloat(t),this.position.y=parseFloat(e)},h._nonTransition=function(t){for(var e in this.css(t.to),t.isCleaning&&this._removeStyles(t.to),t.onTransitionEnd)t.onTransitionEnd[e].call(this)},h.transition=function(t){if(parseFloat(this.layout.options.transitionDuration)){var e=this._transn;for(var i in t.onTransitionEnd)e.onEnd[i]=t.onTransitionEnd[i];for(i in t.to)e.ingProperties[i]=!0,t.isCleaning&&(e.clean[i]=!0);if(t.from){this.css(t.from);this.element.offsetHeight;null}this.enableTransition(t.to),this.css(t.to),this.isTransitioning=!0}else this._nonTransition(t)};var l="opacity,"+o.replace(/([A-Z])/g,(function(t){return"-"+t.toLowerCase()}));h.enableTransition=function(){if(!this.isTransitioning){var t=this.layout.options.transitionDuration;t="number"==typeof t?t+"ms":t,this.css({transitionProperty:l,transitionDuration:t,transitionDelay:this.staggerDelay||0}),this.element.addEventListener(r,this,!1)}},h.onwebkitTransitionEnd=function(t){this.ontransitionend(t)},h.onotransitionend=function(t){this.ontransitionend(t)};var c={"-webkit-transform":"transform"};h.ontransitionend=function(t){if(t.target===this.element){var e=this._transn,i=c[t.propertyName]||t.propertyName;if(delete e.ingProperties[i],function(t){for(var e in t)return!1;return null,!0}(e.ingProperties)&&this.disableTransition(),i in e.clean&&(this.element.style[t.propertyName]="",delete e.clean[i]),i in e.onEnd)e.onEnd[i].call(this),delete e.onEnd[i];this.emitEvent("transitionEnd",[this])}},h.disableTransition=function(){this.removeTransitionStyles(),this.element.removeEventListener(r,this,!1),this.isTransitioning=!1},h._removeStyles=function(t){var e={};for(var i in t)e[i]="";this.css(e)};var u={transitionProperty:"",transitionDuration:"",transitionDelay:""};return h.removeTransitionStyles=function(){this.css(u)},h.stagger=function(t){t=isNaN(t)?0:t,this.staggerDelay=t+"ms"},h.removeElem=function(){this.element.parentNode.removeChild(this.element),this.css({display:""}),this.emitEvent("remove",[this])},h.remove=function(){n&&parseFloat(this.layout.options.transitionDuration)?(this.once("transitionEnd",(function(){this.removeElem()})),this.hide()):this.removeElem()},h.reveal=function(){delete this.isHidden,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("visibleStyle")]=this.onRevealTransitionEnd,this.transition({from:t.hiddenStyle,to:t.visibleStyle,isCleaning:!0,onTransitionEnd:e})},h.onRevealTransitionEnd=function(){this.isHidden||this.emitEvent("reveal")},h.getHideRevealTransitionEndProperty=function(t){var e=this.layout.options[t];if(e.opacity)return"opacity";for(var i in e)return i},h.hide=function(){this.isHidden=!0,this.css({display:""});var t=this.layout.options,e={};e[this.getHideRevealTransitionEndProperty("hiddenStyle")]=this.onHideTransitionEnd,this.transition({from:t.visibleStyle,to:t.hiddenStyle,isCleaning:!0,onTransitionEnd:e})},h.onHideTransitionEnd=function(){this.isHidden&&(this.css({display:"none"}),this.emitEvent("hide"))},h.destroy=function(){this.css({position:"",left:"",right:"",top:"",bottom:"",transition:"",transform:""})},a}))})),wt=gt((function(t){
/*!
 * Outlayer v2.1.1
 * the brains and guts of a layout library
 * MIT license
 */
!function(e,i){t.exports?t.exports=i(e,mt,vt,yt,xt):e.Outlayer=i(e,e.EvEmitter,e.getSize,e.fizzyUIUtils,e.Outlayer.Item)}(window,(function(t,e,i,n,o){var r=t.console,s=t.jQuery,a=function(){},h=0,l={};function c(t,e){var i=n.getQueryElement(t);if(i){this.element=i,s&&(this.$element=s(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e);var o=++h;this.element.outlayerGUID=o,l[o]=this,this._create(),this._getOption("initLayout")&&this.layout()}else r&&r.error("Bad element for "+this.constructor.namespace+": "+(i||t))}c.namespace="outlayer",c.Item=o,c.defaults={containerStyle:{position:"relative"},initLayout:!0,originLeft:!0,originTop:!0,resize:!0,resizeContainer:!0,transitionDuration:"0.4s",hiddenStyle:{opacity:0,transform:"scale(0.001)"},visibleStyle:{opacity:1,transform:"scale(1)"}};var u=c.prototype;function d(t){function e(){t.apply(this,arguments)}return e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e}n.extend(u,e.prototype),u.option=function(t){n.extend(this.options,t)},u._getOption=function(t){var e=this.constructor.compatOptions[t];return e&&void 0!==this.options[e]?this.options[e]:this.options[t]},c.compatOptions={initLayout:"isInitLayout",horizontal:"isHorizontal",layoutInstant:"isLayoutInstant",originLeft:"isOriginLeft",originTop:"isOriginTop",resize:"isResizeBound",resizeContainer:"isResizingContainer"},u._create=function(){this.reloadItems(),this.stamps=[],this.stamp(this.options.stamp),n.extend(this.element.style,this.options.containerStyle),this._getOption("resize")&&this.bindResize()},u.reloadItems=function(){this.items=this._itemize(this.element.children)},u._itemize=function(t){for(var e=this._filterFindItemElements(t),i=this.constructor.Item,n=[],o=0;o<e.length;o++){var r=new i(e[o],this);n.push(r)}return n},u._filterFindItemElements=function(t){return n.filterFindElements(t,this.options.itemSelector)},u.getItemElements=function(){return this.items.map((function(t){return t.element}))},u.layout=function(){this._resetLayout(),this._manageStamps();var t=this._getOption("layoutInstant"),e=void 0!==t?t:!this._isLayoutInited;this.layoutItems(this.items,e),this._isLayoutInited=!0},u._init=u.layout,u._resetLayout=function(){this.getSize()},u.getSize=function(){this.size=i(this.element)},u._getMeasurement=function(t,e){var n,o=this.options[t];o?("string"==typeof o?n=this.element.querySelector(o):o instanceof HTMLElement&&(n=o),this[t]=n?i(n)[e]:o):this[t]=0},u.layoutItems=function(t,e){t=this._getItemsForLayout(t),this._layoutItems(t,e),this._postLayout()},u._getItemsForLayout=function(t){return t.filter((function(t){return!t.isIgnored}))},u._layoutItems=function(t,e){if(this._emitCompleteOnItems("layout",t),t&&t.length){var i=[];t.forEach((function(t){var n=this._getItemLayoutPosition(t);n.item=t,n.isInstant=e||t.isLayoutInstant,i.push(n)}),this),this._processLayoutQueue(i)}},u._getItemLayoutPosition=function(){return{x:0,y:0}},u._processLayoutQueue=function(t){this.updateStagger(),t.forEach((function(t,e){this._positionItem(t.item,t.x,t.y,t.isInstant,e)}),this)},u.updateStagger=function(){var t=this.options.stagger;if(null!=t)return this.stagger=function(t){if("number"==typeof t)return t;var e=t.match(/(^\d*\.?\d*)(\w*)/),i=e&&e[1],n=e&&e[2];if(!i.length)return 0;return(i=parseFloat(i))*(p[n]||1)}(t),this.stagger;this.stagger=0},u._positionItem=function(t,e,i,n,o){n?t.goTo(e,i):(t.stagger(o*this.stagger),t.moveTo(e,i))},u._postLayout=function(){this.resizeContainer()},u.resizeContainer=function(){if(this._getOption("resizeContainer")){var t=this._getContainerSize();t&&(this._setContainerMeasure(t.width,!0),this._setContainerMeasure(t.height,!1))}},u._getContainerSize=a,u._setContainerMeasure=function(t,e){if(void 0!==t){var i=this.size;i.isBorderBox&&(t+=e?i.paddingLeft+i.paddingRight+i.borderLeftWidth+i.borderRightWidth:i.paddingBottom+i.paddingTop+i.borderTopWidth+i.borderBottomWidth),t=Math.max(t,0),this.element.style[e?"width":"height"]=t+"px"}},u._emitCompleteOnItems=function(t,e){var i=this;function n(){i.dispatchEvent(t+"Complete",null,[e])}var o=e.length;if(e&&o){var r=0;e.forEach((function(e){e.once(t,s)}))}else n();function s(){++r==o&&n()}},u.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),s)if(this.$element=this.$element||s(this.element),e){var o=s.Event(e);o.type=t,this.$element.trigger(o,i)}else this.$element.trigger(t,i)},u.ignore=function(t){var e=this.getItem(t);e&&(e.isIgnored=!0)},u.unignore=function(t){var e=this.getItem(t);e&&delete e.isIgnored},u.stamp=function(t){(t=this._find(t))&&(this.stamps=this.stamps.concat(t),t.forEach(this.ignore,this))},u.unstamp=function(t){(t=this._find(t))&&t.forEach((function(t){n.removeFrom(this.stamps,t),this.unignore(t)}),this)},u._find=function(t){if(t)return"string"==typeof t&&(t=this.element.querySelectorAll(t)),t=n.makeArray(t)},u._manageStamps=function(){this.stamps&&this.stamps.length&&(this._getBoundingRect(),this.stamps.forEach(this._manageStamp,this))},u._getBoundingRect=function(){var t=this.element.getBoundingClientRect(),e=this.size;this._boundingRect={left:t.left+e.paddingLeft+e.borderLeftWidth,top:t.top+e.paddingTop+e.borderTopWidth,right:t.right-(e.paddingRight+e.borderRightWidth),bottom:t.bottom-(e.paddingBottom+e.borderBottomWidth)}},u._manageStamp=a,u._getElementOffset=function(t){var e=t.getBoundingClientRect(),n=this._boundingRect,o=i(t);return{left:e.left-n.left-o.marginLeft,top:e.top-n.top-o.marginTop,right:n.right-e.right-o.marginRight,bottom:n.bottom-e.bottom-o.marginBottom}},u.handleEvent=n.handleEvent,u.bindResize=function(){t.addEventListener("resize",this),this.isResizeBound=!0},u.unbindResize=function(){t.removeEventListener("resize",this),this.isResizeBound=!1},u.onresize=function(){this.resize()},n.debounceMethod(c,"onresize",100),u.resize=function(){this.isResizeBound&&this.needsResizeLayout()&&this.layout()},u.needsResizeLayout=function(){var t=i(this.element);return this.size&&t&&t.innerWidth!==this.size.innerWidth},u.addItems=function(t){var e=this._itemize(t);return e.length&&(this.items=this.items.concat(e)),e},u.appended=function(t){var e=this.addItems(t);e.length&&(this.layoutItems(e,!0),this.reveal(e))},u.prepended=function(t){var e=this._itemize(t);if(e.length){var i=this.items.slice(0);this.items=e.concat(i),this._resetLayout(),this._manageStamps(),this.layoutItems(e,!0),this.reveal(e),this.layoutItems(i)}},u.reveal=function(t){if(this._emitCompleteOnItems("reveal",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.reveal()}))}},u.hide=function(t){if(this._emitCompleteOnItems("hide",t),t&&t.length){var e=this.updateStagger();t.forEach((function(t,i){t.stagger(i*e),t.hide()}))}},u.revealItemElements=function(t){var e=this.getItems(t);this.reveal(e)},u.hideItemElements=function(t){var e=this.getItems(t);this.hide(e)},u.getItem=function(t){for(var e=0;e<this.items.length;e++){var i=this.items[e];if(i.element==t)return i}},u.getItems=function(t){t=n.makeArray(t);var e=[];return t.forEach((function(t){var i=this.getItem(t);i&&e.push(i)}),this),e},u.remove=function(t){var e=this.getItems(t);this._emitCompleteOnItems("remove",e),e&&e.length&&e.forEach((function(t){t.remove(),n.removeFrom(this.items,t)}),this)},u.destroy=function(){var t=this.element.style;t.height="",t.position="",t.width="",this.items.forEach((function(t){t.destroy()})),this.unbindResize();var e=this.element.outlayerGUID;delete l[e],delete this.element.outlayerGUID,s&&s.removeData(this.element,this.constructor.namespace)},c.data=function(t){var e=(t=n.getQueryElement(t))&&t.outlayerGUID;return e&&l[e]},c.create=function(t,e){var i=d(c);return i.defaults=n.extend({},c.defaults),n.extend(i.defaults,e),i.compatOptions=n.extend({},c.compatOptions),i.namespace=t,i.data=c.data,i.Item=d(o),n.htmlInit(i,t),s&&s.bridget&&s.bridget(t,i),i};var p={ms:1,s:1e3};return c.Item=o,c}))})),_t=gt((function(t){
/*!
 * Masonry v4.2.2
 * Cascading grid layout library
 * https://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */
!function(e,i){t.exports?t.exports=i(wt,vt):e.Masonry=i(e.Outlayer,e.getSize)}(window,(function(t,e){var i=t.create("masonry");i.compatOptions.fitWidth="isFitWidth";var n=i.prototype;return n._resetLayout=function(){this.getSize(),this._getMeasurement("columnWidth","outerWidth"),this._getMeasurement("gutter","outerWidth"),this.measureColumns(),this.colYs=[];for(var t=0;t<this.cols;t++)this.colYs.push(0);this.maxY=0,this.horizontalColIndex=0},n.measureColumns=function(){if(this.getContainerWidth(),!this.columnWidth){var t=this.items[0],i=t&&t.element;this.columnWidth=i&&e(i).outerWidth||this.containerWidth}var n=this.columnWidth+=this.gutter,o=this.containerWidth+this.gutter,r=o/n,s=n-o%n;r=Math[s&&s<1?"round":"floor"](r),this.cols=Math.max(r,1)},n.getContainerWidth=function(){var t=this._getOption("fitWidth")?this.element.parentNode:this.element,i=e(t);this.containerWidth=i&&i.innerWidth},n._getItemLayoutPosition=function(t){t.getSize();var e=t.size.outerWidth%this.columnWidth,i=Math[e&&e<1?"round":"ceil"](t.size.outerWidth/this.columnWidth);i=Math.min(i,this.cols);for(var n=this[this.options.horizontalOrder?"_getHorizontalColPosition":"_getTopColPosition"](i,t),o={x:this.columnWidth*n.col,y:n.y},r=n.y+t.size.outerHeight,s=i+n.col,a=n.col;a<s;a++)this.colYs[a]=r;return o},n._getTopColPosition=function(t){var e=this._getTopColGroup(t),i=Math.min.apply(Math,e);return{col:e.indexOf(i),y:i}},n._getTopColGroup=function(t){if(t<2)return this.colYs;for(var e=[],i=this.cols+1-t,n=0;n<i;n++)e[n]=this._getColGroupY(n,t);return e},n._getColGroupY=function(t,e){if(e<2)return this.colYs[t];var i=this.colYs.slice(t,t+e);return Math.max.apply(Math,i)},n._getHorizontalColPosition=function(t,e){var i=this.horizontalColIndex%this.cols;i=t>1&&i+t>this.cols?0:i;var n=e.size.outerWidth&&e.size.outerHeight;return this.horizontalColIndex=n?i+t:this.horizontalColIndex,{col:i,y:this._getColGroupY(i,t)}},n._manageStamp=function(t){var i=e(t),n=this._getElementOffset(t),o=this._getOption("originLeft")?n.left:n.right,r=o+i.outerWidth,s=Math.floor(o/this.columnWidth);s=Math.max(0,s);var a=Math.floor(r/this.columnWidth);a-=r%this.columnWidth?0:1,a=Math.min(this.cols-1,a);for(var h=(this._getOption("originTop")?n.top:n.bottom)+i.outerHeight,l=s;l<=a;l++)this.colYs[l]=Math.max(h,this.colYs[l])},n._getContainerSize=function(){this.maxY=Math.max.apply(Math,this.colYs);var t={height:this.maxY};return this._getOption("fitWidth")&&(t.width=this._getContainerFitWidth()),t},n._getContainerFitWidth=function(){for(var t=0,e=this.cols;--e&&0===this.colYs[e];)t++;return(this.cols-t)*this.columnWidth-this.gutter},n.needsResizeLayout=function(){var t=this.containerWidth;return this.getContainerWidth(),t!=this.containerWidth},i}))}));customElements.define("homekit-card",class extends Q{constructor(){super(...arguments),this.renderedRules=[],this.doubleTapped=!1,this.tileHoldAnimation=!1,this.useTemperature=!1,this.useBrightness=!1,this.CUSTOM_TYPE_PREFIX="custom:",this.masonry=!1}static get properties(){return{hass:{},config:{}}}setConfig(t){if(!t.entities&&!t.rows)throw new Error("You need to define entities: or rows:");if(!t.entities&&t.rows&&!t.enableColumns)throw new Error("If you use rows and columns you need to set enableColumns: true");this.config=t,this.useTemperature="useTemperature"in this.config&&this.config.useTemperature,this.useBrightness=!("useBrightness"in this.config)||this.config.useBrightness,this.rowTitleColor=!!this.config.titleColor&&this.config.titleColor,this.horizontalScroll="horizontalScroll"in this.config&&this.config.fullscreen,this.enableColumns="enableColumns"in this.config&&this.config.enableColumns,this.statePositionTop="statePositionTop"in this.config&&this.config.statePositionTop,this.tileHoldAnimation="tileHoldAnimation"in this.config&&this.config.tileHoldAnimation,this.rulesColor=!!this.config.rulesColor&&this.config.rulesColor,this.masonry="masonry"in this.config&&this.config.masonry}addHammer(t){var e=new Hammer(t,{}),i=this;e.on("tap doubletap pressup press panmove",(function(t){t.preventDefault();var e=t.target.dataset,n=JSON.parse(e.ent),o=JSON.parse(e.row);if(i.doubleTapped=!1,"tap"==t.type){i.doubleTapped=!1;var r=200;n.double_tap_action||(r=0),setTimeout((function(){!1===i.doubleTapped&&(t.target.classList.remove("longpress"),i._handleClick(t.type,n,e.type,o))}),r)}else{"doubletap"==t.type&&(i.doubleTapped=!0);e=t.target.dataset;"press"==t.type?t.target.classList.add("longpress"):"panmove"==t.type?t.target.classList.remove("longpress"):(t.target.classList.remove("longpress"),i._handleClick(t.type,n,e.type,o))}}))}render(){return K`
      ${this.config.style?K`
        <style>
          ${this.config.style}
        </style>
      `:K``}
      <div class="container${this.enableColumns?" rows":""}" >
        ${this.config.home?K`
            <div class="header">
                ${this.config.title?K`<h1 style="${this.rowTitleColor?"color:"+this.rowTitleColor:""}">${this.config.title}</h1>`:K``}
                <ul style="${this.rulesColor?"color:"+this.rulesColor:""}">
                  ${this.renderedRules.map(t=>K`<li>${t}</li>`)}
                </ul>
            </div>
        `:K``}
       
        ${this.enableColumns?this._renderRows():this._renderEntities(this.config.entities)}
      </div>
    `}_getEntitiesFromRoot(t){return"entities"in t?t.entities.map(e=>{var i;return Object.assign(Object.assign({},null!==(i=t.entities_defaults)&&void 0!==i?i:{}),e)}):[]}firstUpdated(){for(var t=this.shadowRoot.querySelectorAll("homekit-button.event"),e=0;e<t.length;e++)this.addHammer(t[e]);if(this.shadowRoot.querySelectorAll(".card-tile").forEach(t=>{var e={type:t.dataset.card};e=Object.assign({},e,JSON.parse(t.dataset.options));const i=(n=e,ct?ct.createCardElement(n):pt("card",n));var n,o;t.appendChild(i),o=i,document.querySelector("hc-main")?document.querySelector("hc-main").provideHass(o):document.querySelector("home-assistant")&&document.querySelector("home-assistant").provideHass(o);let r="";if(t.dataset.style?r=t.dataset.style:"custom:mini-graph-card"==t.dataset.card&&(r=":host { height: 100%; } ha-card { background: transparent; color: #000; padding: 0!important; box-shadow: none; } .header { padding: 10px 10px 0 10px; } .header .name, .header .name .ellipsis { font-size: 13px!important; font-weight: 500; color: #000; opacity: 1; } .header icon { color: #f7d959; } .states { padding: 0 10px; } .states .state .state__value { font-size: 13px; } .states .state .state__uom { font-size: 13px; margin-top: 0; line-height: normal; } .header .icon { color: #f7d959; }"),""!=r){let t=0,e=setInterval((function(){if(i&&i.shadowRoot){window.clearInterval(e);var n=document.createElement("style");n.innerHTML=r,i.shadowRoot.appendChild(n)}else 10==++t&&window.clearInterval(e)}),100)}}),this.masonry){console.log("MASONRY");var i=window.innerWidth;console.log(i);var n=120;i<=768&&(n=110),this.shadowRoot.querySelectorAll(".homekit-card").forEach(t=>{console.log(t),new _t(t,{itemSelector:"homekit-button",columnWidth:n,gutter:6})})}}updated(){this._renderRules()}_renderRows(){return K`
      ${this.config.rows.map(t=>K`
          <div class="row">
            ${t.columns.map(t=>K`
                <div class="col${t.tileOnRow?" fixed":""}" style="${t.tileOnRow?"--tile-on-row:"+t.tileOnRow:""}">
                  ${this._renderEntities(t.entities)}
                </div>
              `)}
          </div>
        `)}
    `}_renderState(t,e,i,n){if(!t.hideState){if("light"==n&&(e.attributes.brightness||t.state))return this.statePositionTop?this._renderCircleState(t,e,n):K`
            <span class=" ${i.includes(e.state)?"value":"value on"}">${this._renderStateValue(t,e,n)}</span>
          `;if(("sensor"==n||"binary_sensor"==n)&&(e.last_changed||t.state))return this.statePositionTop?this._renderCircleState(t,e,n):K`
            <span class="previous">${this._renderStateValue(t,e,n)}</span>
          `;if(("switch"==n||"input_boolean"==n)&&t.state)return this.statePositionTop?this._renderCircleState(t,e,n):K`
            <span class="value on">${this._renderStateValue(t,e,n)}</span>
          `;if("climate"==n&&e.attributes.temperature)return this.statePositionTop?this._renderCircleState(t,e,n):K`
            <span class=" ${i.includes(e.state)?"value":"value on"}">${this._renderStateValue(t,e,n)}</span>
          `;if(t.state)return this.statePositionTop?this._renderCircleState(t,e,n):K`
              <span class="value on">${this._renderStateValue(t,e,n)}</span>
            `}}_renderCircleState(t,e,i){return K`
      <svg class="circle-state" viewbox="0 0 100 100" style="${e.attributes.brightness&&!t.state?"--percentage:"+e.attributes.brightness/2.55:""}">
        <path id="progress" stroke-width="3" stroke="#aaabad" fill="none"
              d="M50 10
                a 40 40 0 0 1 0 80
                a 40 40 0 0 1 0 -80">
        </path>
        <text id="count" x="50" y="50" fill="#7d7e80" text-anchor="middle" dy="7" font-size="20">${this._renderStateValue(t,e,i)}</text>
      </svg>
    `}_getValue(t,e){var i=this.hass.states[t],n=e.split(".");for(var o of n)i=i[o]?i[o]:null;return i}_renderStateValue(t,e,i){return"light"==i?K`
        ${e.attributes.brightness&&!t.state?K`${Math.round(e.attributes.brightness/2.55)}%`:K``}
        ${t.state&&!t.statePath?K`${T(this.hass.localize,this.hass.states[t.state],this.hass.language)}`:K``}
        ${t.state&&t.statePath?K`${this._getValue(t.state,t.statePath)}`:K``}
      `:"sensor"==i||"binary_sensor"==i?K`
        ${e.last_changed&&!t.state?K`${this._calculateTime(e.last_changed)}`:K``}
        ${t.state&&!t.statePath?K`${T(this.hass.localize,this.hass.states[t.state],this.hass.language)}`:K``}
        ${t.state&&t.statePath?K`${this._getValue(t.state,t.statePath)}`:K``}
      `:"switch"==i||"input_boolean"==i?K`
        ${t.state&&!t.statePath?K`${T(this.hass.localize,this.hass.states[t.state],this.hass.language)}`:K``}
        ${t.state&&t.statePath?K`${this._getValue(t.state,t.statePath)}`:K``}
      `:"climate"==i?K`
        ${e.attributes.temperature?K`${e.attributes.temperature}&#176;`:K``}
      `:K`
        ${t.state&&!t.statePath?K`${T(this.hass.localize,this.hass.states[t.state],this.hass.language)}`:K``}
        ${t.state&&t.statePath?K`${this._getValue(t.state,t.statePath)}`:K``}
      `}_evalTemplate(t,e){try{return new Function("states","entity","user","hass","variables","html","'use strict'; "+e).call(this,this.hass.states,t,this.hass.user,this.hass,K)}catch(t){const i=e.length<=100?e.trim():e.trim().substring(0,98)+"...";throw t.message=`${t.name}: ${t.message} in '${i}'`,t.name="ButtonCardJSTemplateError",t}}_getTemplate(t,e){const i=e.trim();if("[[["===i.substring(0,3)&&"]]]"===i.slice(-3))return this._evalTemplate(t,i.slice(3,-3))}_renderEntities(t){return K`
      ${t.map(t=>{var e=0;return K`
            <div class="card-title" style="${this.rowTitleColor?"color:"+this.rowTitleColor:""}">${t.title}</div>
                <div class="homekit-card${!0===this.horizontalScroll?" scroll":""}${!0===this.masonry?" masonry":""}">
                    ${this._getEntitiesFromRoot(t).map(i=>{if(!i.card&&!i.custom){var n=["off","unavailable"];i.offStates&&(n=i.offStates);const a=this.hass.states[i.entity];var o="#f7d959";3==e&&(e=0),4==e&&(e=2),o=i.color?i.color:this._getColorForLightEntity(a,this.useTemperature,this.useBrightness);var r=i.entity.split(".")[0];if("light"==r)return e++,i.slider?a?K`
                                <homekit-button class="event slider ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                    <div class="button-inner${this.statePositionTop?" state-top":""}">
                                      <span class="icon${!0!==i.spin||n.includes(a.state)?"":" spin"}${i.image?" image":""}" style="${n.includes(a.state)?"":"color:"+o+";"}">
          
                                        ${i.image?K`
                                          <img src="${i.offImage&&n.includes(a.state)?i.offImage:i.image}" />
                                        `:K`
                                          <ha-icon icon="${i.offIcon?n.includes(a.state)?i.offIcon:i.icon:i.icon||a.attributes.icon||E(S(a.entity_id),a.state)}" class=" ${i.spin&&"on"===a.state?"spin":""}"/>
                                        `}
                                        
                                      </span>
                                      <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                      <span class="${n.includes(a.state)?"state":"state on"}">
                                        ${T(this.hass.localize,a,this.hass.language)}
                                        ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                      </span>
                                      ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                    </div>
                                    ${n.includes(a.state)?K``:K`<input type="range" .value="${a.attributes.brightness/2.55}" @change=${t=>this._setBrightness(a,t.target.value)}>`}
                                </homekit-button>
                              ${3==e?K`<div class="break"></div>`:K``}
                              `:this._notFound(i):a?K`
                                <homekit-button class="event ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                    <div class="button-inner${this.statePositionTop?" state-top":""}">
                                      <span class="icon${!0!==i.spin||n.includes(a.state)?"":" spin"}${i.image?" image":""}" style="${n.includes(a.state)?"":"color:"+o+";"}">

                                        ${i.image?K`
                                          <img src="${i.offImage&&n.includes(a.state)?i.offImage:i.image}" />
                                        `:K`
                                          <ha-icon icon="${i.offIcon?n.includes(a.state)?i.offIcon:i.icon:i.icon||a.attributes.icon||E(S(a.entity_id),a.state)}" class=" ${i.spin&&"on"===a.state?"spin":""}"/>
                                        `}
                                      </span>
                                      <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                      <span class="${n.includes(a.state)?"state":"state on"}">
                                        ${T(this.hass.localize,a,this.hass.language)}
                                        ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                      </span>
                                      ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                    </div>
                                </homekit-button>
                              ${3==e?K`<div class="break"></div>`:K``}
                              `:this._notFound(i);if("sensor"==r||"binary_sensor"==r)return e++,a?K`
                              <homekit-button class="event ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                  <div class="button-inner${this.statePositionTop?" state-top":""}">
                                    <span class="${n.includes(a.state)?"icon":"icon on"}${!0!==i.spin||n.includes(a.state)?"":" spin"}${i.image?" image":""}">
                                      ${i.image?K`
                                        <img src="${i.offImage&&n.includes(a.state)?i.offImage:i.image}" />
                                      `:K`
                                        <ha-icon icon="${i.offIcon?n.includes(a.state)?i.offIcon:i.icon:i.icon||a.attributes.icon||E(S(a.entity_id),a.state)}" />
                                      `}
                                    </span>
                                    <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                    <span class="${n.includes(a.state)?"state":"state on"}">
                                      ${T(this.hass.localize,a,this.hass.language)}
                                      ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                    </span>
                                    ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `:this._notFound(i);if("switch"==r||"input_boolean"==r)return e++,a?K`
                              <homekit-button class="event ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                  <div class="button-inner">
                                    <span class="${n.includes(a.state)?"icon":"icon on"}${!0!==i.spin||n.includes(a.state)?"":" spin"}${i.image?" image":""}">
                                      ${i.image?K`
                                        <img src="${i.offImage&&n.includes(a.state)?i.offImage:i.image}" />
                                      `:K`
                                        <ha-icon icon="${i.offIcon?n.includes(a.state)?i.offIcon:i.icon:i.icon||a.attributes.icon||E(S(a.entity_id),a.state)}" />
                                      `}
                                    </span>
                                    <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                    <span class="${n.includes(a.state)?"state":"state on"}">
                                      ${T(this.hass.localize,a,this.hass.language)}
                                      ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                    </span>
                                    ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `:this._notFound(i);if("weather"==r)return e+=2,a?K`
                            ${4==e?K`<div class="break"></div>`:K``}
                              <homekit-button class="event button size-2 on${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                  <div class="button-inner">
                                    <span class="icon on">
                                      <ha-icon icon="${i.icon||a.attributes.icon||"mdi:weather-"+a.state}" />
                                    </span>
                                    <span class="name on">${i.name||a.attributes.friendly_name}</span>
                                    <span class="state on">${T(this.hass.localize,a,this.hass.language)}
                                      ${a.attributes.forecast[0]&&a.attributes.forecast[0].precipitation?K`
                                          <span class="value on">${a.attributes.forecast[0].precipitation} ${this._getUnit("precipitation")}</span>
                                      `:K``}
                                    </span>
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `:this._notFound(i);if("climate"==r){e++;var s="";return s="off"==a.state?"off":"heating"==a.attributes.hvac_action?"heat":"idle"==a.attributes.hvac_action?"idle":a.state in{auto:"hass:calendar-repeat",heat_cool:"hass:autorenew",heat:"hass:fire",cool:"hass:snowflake",off:"hass:power",fan_only:"hass:fan",dry:"hass:water-percent"}?a.state:"unknown-mode",a?K`
                              <homekit-button class="event ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                  <div class="button-inner">
                                    <span class="${n.includes(a.state)?"icon climate "+s:"icon climate on "+s}">
                                      ${i.state?Math.round(this.hass.states[i.state].state):Math.round(a.attributes.current_temperature)}&#176;
                                    </span>
                                    <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                    <span class="${n.includes(a.state)?"state":"state on"}">
                                      ${T(this.hass.localize,a,this.hass.language)}
                                      ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                    </span>
                                    ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `:this._notFound(i)}return e++,a?K`
                              <homekit-button class="event ${n.includes(a.state)?"button":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(a,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(a,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="${r}" data-row="${JSON.stringify(t)}">
                                  <div class="button-inner">
                                    <span class="${n.includes(a.state)?"icon":"icon on"}${!0!==i.spin||n.includes(a.state)?"":" spin"}${i.image?" image":""}">
                                      ${i.image?K`
                                        <img src="${i.offImage&&n.includes(a.state)?i.offImage:i.image}" />
                                      `:K`
                                        <ha-icon icon="${i.offIcon?n.includes(a.state)?i.offIcon:i.icon:i.icon||a.attributes.icon||E(S(a.entity_id),a.state)}" />
                                      `}
                                    </span>
                                    <span class="${n.includes(a.state)?"name":"name on"}">${i.name||a.attributes.friendly_name}</span>
                                    <span class="${n.includes(a.state)?"state":"state on"}">
                                      ${T(this.hass.localize,a,this.hass.language)}
                                      ${this.statePositionTop?"":this._renderState(i,a,n,r)}
                                    </span>
                                    ${this.statePositionTop?this._renderState(i,a,n,r):""}
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `:this._notFound(i)}if(i.card&&!i.custom){e++;var a={state:""};return n=["off","unavailable"],i.entity&&(i.offStates&&(n=i.offStates),a=this.hass.states[i.entity]),i.tap_action?K`
                            <homekit-button class="${i.entity?""!=a.state&&n.includes(a.state)?"button":" button on":"button on"} event${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(void 0,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(void 0,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="'card'" data-row="${JSON.stringify(t)}">
                                <div class="button-inner card-tile" data-card="${i.card}" data-options="${JSON.stringify(i.cardOptions)}" data-style="${i.cardStyle?i.cardStyle:""}">
                                </div>
                            </homekit-button>
                          ${3==e?K`<div class="break"></div>`:K``}
                        `:K`
                              <homekit-button class="${i.entity?""!=a.state&&n.includes(a.state)?"button":" button on":"button on"}${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(void 0,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(void 0,i.conditionalClass):""}">
                                  <div class="button-inner card-tile" data-card="${i.card}" data-options="${JSON.stringify(i.cardOptions)}" data-style="${i.cardStyle?i.cardStyle:""}">
                                  </div>
                              </homekit-button>
                            ${3==e?K`<div class="break"></div>`:K``}
                          `}if(i.custom){e++;a={state:""};return n=["off","unavailable"],i.entity&&(i.offStates&&(n=i.offStates),a=this.hass.states[i.entity]),K`
                          <homekit-button class="${i.entity?""!=a.state&&n.includes(a.state)?"button":" button on":"button on"} event${i.noPadding?" no-padding":""}${i.wider?i.widerSize?" size-"+i.widerSize:" size-2":""}${i.higher?i.higherSize?" height-"+i.higherSize:" height-2":""}${i.halfheight?" height-half":""}${this.tileHoldAnimation?" animate":""}${i.hide&&this._getTemplate(void 0,i.hide)?" hide":""}${i.conditionalClass?" "+this._getTemplate(void 0,i.conditionalClass):""}" data-ent="${JSON.stringify(i)}" data-type="'custom'" data-row="${JSON.stringify(t)}">
                              <div class="button-inner">
                                <span class="icon on${!0===i.spin?" spin":""}${i.image?" image":""}">
                                  ${i.image?K`
                                    <img src="${i.image}" />
                                  `:K`
                                    <ha-icon icon="${i.icon}" />
                                  `}
                                </span>
                                <span class="name on">${i.name}</span>
                                ${i.state?K`<span class="state">${T(this.hass.localize,this.hass.states[i.state],this.hass.language)}</span>`:K``}
                              </div>
                          </homekit-button>
                        ${3==e?K`<div class="break"></div>`:K``}
                        `}})}
                </div>
            </div>
        `})}
    `}_setBrightness(t,e){this.hass.callService("homeassistant","turn_on",{entity_id:t.entity_id,brightness:2.55*e})}_renderRules(){!0===this.config.home&&this.config.rules&&async function(t,e,i={}){for(var n in t||(t=t()),i={},i=Object.assign({user:t.user.name,browser:at,hash:location.hash.substr(1)||" "},i)){var o=new RegExp(`\\{${n}\\}`,"g");e=e.replace(o,i[n])}return t.callApi("POST","template",{template:e})}(this.hass,this.config.rules).then(t=>{if(t){var e=t.match(/<li>([^]*?)<\/li>/g).map((function(t){return t.replace(/<\/?li>/g,"")}));this.renderedRules=e}})}_calculateTime(t){const e=new Date,i=new Date(t),n=e.getTime()-i.getTime(),o=Math.floor(n/864e5),r=Math.floor(n%864e5/36e5),s=Math.round(n%864e5%36e5/6e4),a=Math.round(n%864e5%36e5%6e4/1e3);return o>0?this.statePositionTop?o+"d":o+" days ago":r>0?this.statePositionTop?r+"h":r+" hours ago":s>0?this.statePositionTop?s+"m":s+" minutes ago":this.statePositionTop?a+"s":a+" seconds ago"}_handleClick(t,e,i,n){var o=null;e.entity&&(o=this.hass.states[e.entity]),"tap"==t||"doubletap"==t?"doubletap"==t&&e.double_tap_action?this._customAction(e.double_tap_action,e,n):e.tap_action?this._customAction(e.tap_action,e,n):"light"!==i&&"switch"!==i&&"input_boolean"!==i||this._toggle(o,e.service):"pressup"==t&&(e.hold_action?this._customAction(e.hold_action,e,n):this._hold(o,e,n))}_customAction(t,e,i){if(!t.confirmation||(C("warning"),confirm(t.confirmation.text||`Are you sure you want to ${t.action}?`)))switch(t.action){case"popup":this._createPopup(t.entity||e.entity,e,i);break;case"more-info":(t.entity||t.camera_image)&&ot(t.entity?t.entity:t.camera_image);break;case"navigate":t.navigation_path&&function(t,e,i){void 0===i&&(i=!1),i?history.replaceState(null,"",e):history.pushState(null,"",e),k(window,"location-changed",{replace:i})}(window,t.navigation_path);break;case"url":t.url_path&&window.open(t.url_path);break;case"toggle":t.entity&&(M(this.hass,t.entity),C("success"));break;case"call-service":{if(!t.service)return void C("failure");const[e,i]=t.service.split(".",2);this.hass.callService(e,i,t.service_data),C("success")}}}getCardSize(){return 1}async _createPopup(t,e,i){if(i&&i.popup||e.popup){if(i.popup){var n=Object.assign({},i.popup,{entity:t});if(e.popupExtend)n=Object.assign({},n,e.popupExtend)}else n=Object.assign({},e.popup,{entity:t});var o={title:" ",style:{$:".mdc-dialog .mdc-dialog__container { width: 100%; } .mdc-dialog .mdc-dialog__container .mdc-dialog__surface { width:100%; box-shadow:none; }",".":":host { --mdc-theme-surface: rgba(0,0,0,0); --secondary-background-color: rgba(0,0,0,0); --ha-card-background: rgba(0,0,0,0); --mdc-dialog-scrim-color: rgba(0,0,0,0.8); --mdc-dialog-min-height: 100%; --mdc-dialog-min-width: 100%; --mdc-dialog-max-width: 100%; } mwc-icon-button { color: #FFF; }"},card:n,deviceID:["this"]};await this.hass.callService("browser_mod","popup",o)}else ot(t)}_toggle(t,e){this.hass.callService("homeassistant",e||"toggle",{entity_id:t.entity_id})}_hold(t,e,i){this._createPopup(t.entity_id,e,i)}_getUnit(t){const e=this.hass.config.unit_system.length;switch(t){case"air_pressure":return"km"===e?"hPa":"inHg";case"length":return e;case"precipitation":return"km"===e?"mm":"in";default:return this.hass.config.unit_system[t]||""}}_notFound(t){return K`
        <homekit-button class="not-found">
          <div class="button-inner">
            <span class="name">${t.entity}</span>
            <span class="state">Not found</span>
          </div>
        </homekit-button>
    `}_getColorForLightEntity(t,e,i){var n=this.config.default_color?this.config.default_color:void 0;return t&&(t.attributes.rgb_color?(n=`rgb(${t.attributes.rgb_color.join(",")})`,i&&t.attributes.brightness&&(n=this._applyBrightnessToColor(n,(t.attributes.brightness+245)/5))):e&&t.attributes.color_temp&&t.attributes.min_mireds&&t.attributes.max_mireds?(n=this._getLightColorBasedOnTemperature(t.attributes.color_temp,t.attributes.min_mireds,t.attributes.max_mireds),i&&t.attributes.brightness&&(n=this._applyBrightnessToColor(n,(t.attributes.brightness+245)/5))):n=i&&t.attributes.brightness?this._applyBrightnessToColor(this._getDefaultColorForState(),(t.attributes.brightness+245)/5):this._getDefaultColorForState()),n}_applyBrightnessToColor(t,e){const i=new G(this._getColorFromVariable(t));if(i.isValid){const t=i.mix("black",100-e).toString();if(t)return t}return t}_getLightColorBasedOnTemperature(t,e,i){const n=new G("rgb(255, 160, 0)"),o=new G("rgb(166, 209, 255)"),r=new G("white"),s=(t-e)/(i-e)*100;return s<50?Z(o).mix(r,2*s).toRgbString():Z(r).mix(n,2*(s-50)).toRgbString()}_getDefaultColorForState(){return this.config.color_on?this.config.color_on:"#f7d959"}_getColorFromVariable(t){return void 0!==t&&"var"===t.substring(0,3)?window.getComputedStyle(document.documentElement).getPropertyValue(t.substring(4).slice(0,-1)).trim():t}static get styles(){return tt`
      :host {
        --auto-color: #EE7600;
        --eco-color: springgreen;
        --cool-color: #2b9af9;
        --heat-color: #EE7600;
        --manual-color: #44739e;
        --off-color: lightgrey;
        --fan_only-color: #8a8a8a;
        --dry-color: #efbd07;
        --idle-color: #00CC66;
        --unknown-color: #bac;
        box-sizing: border-box;
      }

      :host::after {
        display: table;
        content: '';
        clear: both;
      }

      .card-title {
          margin-bottom:-10px;
          padding-left: 4px;
          font-size: 18px;
          padding-top:18px;
          padding-bottom:10px;
      }

      .row {
        display: flex;
        flex-wrap: wrap;
        flex-direction:row;
        padding-top:50px;
      }
      .row:first-child {
        padding-top:0;
      }

      .row .col {
        padding:0 25px;
      }
      .row .col.fixed {
        min-width: calc(var(--tile-on-row) * calc(var(--tile-width, 100px) + 29px));
        width: calc(var(--tile-on-row) * calc(var(--tile-width, 100px) + 29px));
      }
      
      .homekit-card {
        white-space: initial;
      }
      .homekit-card.scroll {
        overflow-x: auto;
        overflow-y: hidden;
        white-space: nowrap;
      }

      .container {
          float: left;
          clear: left;
          margin-top: 10px;
          padding: 5px 0 5px 15px;
          white-space: nowrap;
          width: 100%;
          box-sizing: border-box;
      }
      .container.rows {
        padding: 5px 0;
      }
      .container.rows .header {
        padding: 0 25px;
      }
      .header {
          min-height: var(--min-header-height, 150px);
          margin-bottom: 30px;
      }
      .header h1 {
          margin-bottom: 30px;
          margin-left: 4px;
          font-size: 32px;
          font-weight: 300;
      }

      .header ul {
        margin:0 0 30px 4px;
        padding: 0 16px 0 0;
        list-style:none;
      }
      
      .header ul li {
        display:block;
        color:inherit;
        font-size:20px;
        font-weight:300;
        white-space: normal;
      }

      homekit-button {
        transform-origin: center center;
      }

      .button {
        vertical-align: top;
        cursor: pointer;
        display:inline-block;
        width: var(--tile-width, 100px);
        height: var(--tile-height, 100px);
        padding:10px;
        background-color: var(--tile-background, rgba(255, 255, 255, 0.8));
        border-radius: var(--tile-border-radius, 12px);
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3);
        margin: 3px;
        position: relative;
        overflow:hidden;
        font-weight:300;
        touch-action: auto!important;
      }

      .button.height-half {
        height:calc((var(--tile-height, 100px) * 0.5) - 13px);
      }
      .button.no-padding {
        padding: 0;
        width: calc(var(--tile-width, 100px) * 1.2);
        height: 120px;
      }
      .button.no-padding.height-half {
        height:calc((var(--tile-height, 100px) * 0.5) - 3px + 10px);
      }

      .button.size-1-half {
        width: calc((var(--tile-width, 100px) * 1.5) + (20px * 0) + (5px * 2) + 4px);
      }
      .button.size-2 {
        width: calc((var(--tile-width, 100px) * 2) + (20px * 1) + (5px * 2) - 4px);
      }
      .button.size-3 {
        width: calc((var(--tile-width, 100px) * 3) + (20px * 2) + (5px * 3) + 4px);
      }
      .button.size-4 {
        width: calc((var(--tile-width, 100px) * 4) + (20px * 3) + (5px * 4) - 4px);
      }
      .button.size-5 {
        width: calc((var(--tile-width, 100px) * 5) + (20px * 4) + (5px * 5) - 4px);
      }
      .button.size-6 {
        width: calc((var(--tile-width, 100px) * 6) + (20px * 5) + (5px * 6) - 4px);
      }

      .button.height-2 {
        height: calc((var(--tile-height, 100px) * 2) + (20px * 1) + (5px * 2) - 3px);
      }
      .button.height-3 {
        height: calc((var(--tile-height, 100px) * 3) + (20px * 2) + (5px * 3) - 3px);
      }
      .button.height-4 {
        height: calc((var(--tile-height, 100px) * 4) + (20px * 3) + (5px * 4) - 3px);
      }
      .button.height-5 {
        height: calc((var(--tile-height, 100px) * 5) + (20px * 4) + (5px * 5) - 3px);
      }
      .button.height-6 {
        height: calc((var(--tile-height, 100px) * 6) + (20px * 5) + (5px * 6) - 3px);
      }

      .button.size-1-half.no-padding {
        width: calc((var(--tile-width, 100px) * 1.5) + (20px * 0) + (5px * 2) + 20px - 4px);
      }
      .button.size-2.no-padding {
        width: calc((var(--tile-width, 100px) * 2) + (20px * 1) + (5px * 2) + 20px - 4px);
      }
      .button.size-3.no-padding {
        width: calc((var(--tile-width, 100px) * 3) + (20px * 2) + (5px * 3) + 20px + 4px);
      }
      .button.size-4.no-padding {
        width: calc((var(--tile-width, 100px) * 4) + (20px * 3) + (5px * 4) + 20px - 4px);
      }
      .button.size-5.no-padding {
        width: calc((var(--tile-width, 100px) * 5) + (20px * 4) + (5px * 5) + 20px - 4px);
      }
      .button.size-6.no-padding {
        width: calc((var(--tile-width, 100px) * 6) + (20px * 5) + (5px * 6) + 20px - 4px);
      }

      .button.height-2.no-padding {
        height: calc((var(--tile-height, 100px) * 2) + (20px * 1) + (5px * 2) + 20px - 3px);
      }
      .button.height-3.no-padding {
        height: calc((var(--tile-height, 100px) * 3) + (20px * 2) + (5px * 3) + 20px - 3px);
      }
      .button.height-4.no-padding {
        height: calc((var(--tile-height, 100px) * 4) + (20px * 3) + (5px * 4) + 20px - 3px);
      }
      .button.height-5.no-padding {
        height: calc((var(--tile-height, 100px) * 5) + (20px * 4) + (5px * 5) + 20px - 3px);
      }
      .button.height-6.no-padding {
        height: calc((var(--tile-height, 100px) * 6) + (20px * 5) + (5px * 6) + 20px - 3px);
      }
      
      .button input[type="range"] {
        pointer-events: none;
        outline: 0;
        border: 0;
        border-radius: 8px;
        width: var(--slider-width, 120px);
        margin: 0;
        transition: box-shadow 0.2s ease-in-out;
        overflow: hidden;
        height: var(--slider-height, 120px);
        -webkit-appearance: none;
        background-color: var(--tile-background);
        position: absolute;
        top: calc(50% - (var(--slider-height, 120px) / 2));
        right: calc(50% - (var(--slider-width, 120px) / 2));
      }
      .button input[type="range"]::-webkit-slider-runnable-track {
        height: var(--slider-height, 120px);
        -webkit-appearance: none;
        color: var(--tile-background);
        margin-top: -1px;
        transition: box-shadow 0.2s ease-in-out;
      }
      .button input[type="range"]::-webkit-slider-thumb {
        pointer-events:auto;
        width: 25px;
        border-right:10px solid var(--tile-on-background);
        border-left:10px solid var(--tile-on-background);
        border-top:20px solid var(--tile-on-background);
        border-bottom:20px solid var(--tile-on-background);
        -webkit-appearance: none;
        height: 80px;
        cursor: ew-resize;
        background: var(--tile-on-background);
        box-shadow: -350px 0 0 350px var(--tile-on-background), inset 0 0 0 80px var(--tile-background);
        border-radius: 0;
        transition: box-shadow 0.2s ease-in-out;
        position: relative;
        top: calc((var(--slider-height, 120px) - 80px) / 2);
      }

      .button.size-2 input[type="range"] {
        width: calc(var(--slider-width, 120px) * 2.26);
        right: calc(50% - ((var(--slider-width, 120px) * 2.26) / 2));
      }

      .button.height-2 input[type="range"] {
        height: calc(var(--slider-height, 120px) * 2.26);
        top: calc(50% - ((var(--slider-height, 120px) * 2.26) / 2));
      }
      .button.height-2 input[type="range"]::-webkit-slider-runnable-track {
        height: calc(var(--slider-height, 120px) * 2.26);
      }
      .button.height-2 input[type="range"]::-webkit-slider-thumb {
        top: calc(((var(--slider-height, 120px) * 2.26) - 80px) / 2);
      }

      .button.height-half input[type="range"] {
        height: calc(var(--slider-height, 120px) * 0.58333333333);
        top: calc(50% - ((var(--slider-height, 120px) * 0.58333333333) / 2));
      }
      .button.height-half input[type="range"]::-webkit-slider-runnable-track {
        height: calc(var(--slider-height, 120px) * 0.58333333333);
      }
      .button.height-half input[type="range"]::-webkit-slider-thumb {
        top: calc(((var(--slider-height, 120px) * 0.58333333333) - 80px) / 2);
      }
      

      :host:last-child .button {
        margin-right:13px;
      }
      
      .button.on {
        background-color: var(--tile-on-background, rgba(255, 255, 255, 1));
      }
      
      .button .button-inner {
        display:flex;
        flex-direction:column;
        height:100%;
      }
      .button.event .button-inner {
        pointer-events: none;
      }
      .button.slider .button-inner {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 10px;
        z-index: 1;
        display: flex;
        flex-direction: column;
        pointer-events: none;
        height: auto;
      }

      .button.height-half .button-inner {
        flex-direction:row;
        align-items: center;
      }
      .button.height-half .button-inner .name {
        margin-top:0;
        margin-left:10px;
      }

      .button.height-half .button-inner .icon ha-icon {
        display: block;
        line-height: 35px;
        height: 35px;
      }

      homekit-button.hide {
        display:none;
      }
      
      homekit-button .name {
        display:block;
        font-size: 14px;
        line-height: 14px;
        font-weight: 500;
        color: var(--tile-name-text-color, rgba(0, 0, 0, 0.4));
        width: 100%;
        margin-top: auto;
        margin-bottom: -5px;
        padding-bottom: 5px;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        word-wrap:break-word;
        overflow: hidden;
        white-space: normal;
        pointer-events: none;
      }
      
      homekit-button .name.on {
        color: var(--tile-on-name-text-color, rgba(0, 0, 0, 1));
      }
      
      homekit-button .state {
        position: relative;
        font-size: 14px;
        color: var(--tile-state-text-color, rgba(0, 0, 0, 0.4));
        text-transform: capitalize;
        float: left;
        white-space: nowrap;
        pointer-events: none;
      }

      homekit-button .state .previous {
        position: relative;
        margin-left: 5px;
        font-size: 9px;
        color: var(--tile-state-changed-text-color, rgb(134, 134, 134));
        text-transform: lowercase;
        pointer-events: none;
      }
      
      homekit-button .value {
        visibility: hidden;
        pointer-events: none;
      }
      
      homekit-button .value.on {
        visibility: visible;
        position: relative;
        margin-left: 5px;
        font-size: 11px;
        color: var(--tile-value-text-color, rgba(255, 0, 0, 1));
        text-transform: lowercase;
      }
      
      .button .button-inner .circle-state {
        stroke-dasharray: calc((251.2 / 100) * var(--percentage)), 251.2;
        position:absolute;
        margin:0;
        top:10px;
        right:10px;
        width: 40px;
        height: 40px;
        pointer-events: none;
      }

      homekit-button .state.on {
        color: var(--tile-on-state-text-color, rgba(0, 0, 0, 1));
      }
      homekit-button .state.unavailable {
        color: var(--tile-unavailable-state-text-color, rgba(255, 0, 0, 1));
      }
      
      homekit-button .icon {
        display:block;
        height: calc(var(--tile-icon-size, 30px) + 10px);
        width: calc(var(--tile-icon-size, 30px) + 10px);
        color: var(--tile-icon-color, rgba(0, 0, 0, 0.3));
        font-size: var(--tile-icon-size, 30px);
        --mdc-icon-size: var(--tile-icon-size, 30px);
        transform-origin: 50% 50%;
        line-height: calc(var(--tile-icon-size, 30px) + 10px);
        text-align: center;
        pointer-events: none;
      }

      homekit-button .icon.image img {
        width:100%;
        border-radius: var(--tile-image-radius, 100%)
      }

      homekit-button .icon ha-icon {
        width:30px;
        height:30px;
        pointer-events: none;
      }
                
      homekit-button .icon.on {
        color: var(--tile-on-icon-color, #f7d959);
      }

      homekit-button .icon.climate {
        color:#FFF;
        background-color: rgba(0,255,0, 1);
        font-size: 16px;
        font-weight: 400;
        text-align: center;
        line-height: 45px;
        padding: 0;
        border-radius: 100%;
        height: 45px;
        width: 45px;
      }
      homekit-button .icon.climate.temp.heat_cool {
        background-color: var(--auto-color);
      }
      homekit-button .icon.climate.temp.cool {
        background-color: var(--cool-color);
      }
      homekit-button .icon.climate.temp.heat {
        background-color: var(--heat-color);
      }
      homekit-button .icon.climate.temp.manual {
        background-color: var(--manual-color);
      }
      homekit-button .icon.climate.temp.off {
        background-color: var(--off-color);
      }
      homekit-button .icon.climate.temp.fan_only {
        background-color: var(--fan_only-color);
      }
      homekit-button .icon.climate.temp.eco {
        background-color: var(--eco-color);
      }
      homekit-button .icon.climate.temp.dry {
        background-color: var(--dry-color);
      }
      homekit-button .icon.climate.temp.idle {
        background-color: var(--idle-color);
      }
      homekit-button .icon.climate.temp.unknown-mode {
        background-color: var(--unknown-color);
      }
      
      homekit-button .circle {
        position: absolute;
        top: 17px;
        left: 10px;
        height: 35px;
        width: 35px;
        background-color: rgba(0, 255, 0, 1);
        border-radius: 20px;
        pointer-events: none;
      }
      
      homekit-button .temp {
        position: absolute;
        top: 26px;
        left: 19px;
        font-family: Arial;
        font-size: 14px;
        font-weight: bold;
        color: white;
        pointer-events: none;
      }
      
      .not-found {
        cursor: pointer;
        display:inline-block;
        width: 110px;
        height: 110px;
        padding:5px;
        background-color: rgba(255, 0, 0, 0.8);
        border-radius: 12px;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3);
        margin: 3px;
        position: relative;
        overflow:hidden;
        font-weight:300;
        touch-action: auto!important;
      }

      .break {
        display:none;
      }
      @media only screen and (max-width: 768px) {
        .button {
          width:var(--tile-width-mobile, 90px);
          height:var(--tile-height-mobile, 90px);
        }
        .button.height-half {
          height: calc((var(--tile-height-mobile, 90px) * 0.5) - 13px);
        }
        .button.no-padding {
          width: calc(var(--tile-width-mobile, 90px) * 1.22);
          height: calc(var(--tile-height-mobile, 90px) * 1.22);
        }
        .button.no-padding.height-half {
          height: calc((var(--tile-height-mobile, 90px) * 0.5) - 3px + 10px);
        }

        .button.size-1-half {
          width: calc((var(--tile-width-mobile, 90px) * 1.5) + (20px * 0) + (5px * 2) + 4px);
        }
        .button.size-2 {
          width: calc((var(--tile-width-mobile, 90px) * 2) + (20px * 1) + (5px * 2) - 4px);
        }
        .button.size-3 {
          width: calc((var(--tile-width-mobile, 90px) * 3) + (20px * 2) + (5px * 3) + 4px);
        }
        .button.size-4 {
          width: calc((var(--tile-width-mobile, 90px) * 4) + (20px * 3) + (5px * 4) - 4px);
        }
        .button.size-5 {
          width: calc((var(--tile-width-mobile, 90px) * 5) + (20px * 4) + (5px * 5) - 4px);
        }
        .button.size-6 {
          width: calc((var(--tile-width-mobile, 90px) * 6) + (20px * 5) + (5px * 6) - 4px);
        }
  
        .button.height-2 {
          height: calc((var(--tile-height-mobile, 90px) * 2) + (20px * 1) + (5px * 2) - 3px);
        }
        .button.height-3 {
          height: calc((var(--tile-height-mobile, 90px) * 3) + (20px * 2) + (5px * 3) - 3px);
        }
        .button.height-4 {
          height: calc((var(--tile-height-mobile, 90px) * 4) + (20px * 3) + (5px * 4) - 3px);
        }
        .button.height-5 {
          height: calc((var(--tile-height-mobile, 90px) * 5) + (20px * 4) + (5px * 5) - 3px);
        }
        .button.height-6 {
          height: calc((var(--tile-height-mobile, 90px) * 6) + (20px * 5) + (5px * 6) - 3px);
        }
  
        .button.size-1-half.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 1.5) + (20px * 0) + (5px * 2) + 20px + 4px);
        }
        .button.size-2.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 2) + (20px * 1) + (5px * 2) + 20px - 4px);
        }
        .button.size-3.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 3) + (20px * 2) + (5px * 3) + 20px + 4px);
        }
        .button.size-4.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 4) + (20px * 3) + (5px * 4) + 20px - 4px);
        }
        .button.size-5.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 5) + (20px * 4) + (5px * 5) + 20px - 4px);
        }
        .button.size-6.no-padding {
          width: calc((var(--tile-width-mobile, 90px) * 6) + (20px * 5) + (5px * 6) + 20px - 4px);
        }
  
        .button.height-2.no-padding {
          height: calc((var(--tile-height-mobile, 90px) * 2) + (20px * 1) + (5px * 2) + 20px - 3px);
        }
        .button.height-3.no-padding {
          height: calc((var(--tile-height-mobile, 90px) * 3) + (20px * 2) + (5px * 3) + 20px - 3px);
        }
        .button.height-4.no-padding {
          height: calc((var(--tile-height-mobile, 90px) * 4) + (20px * 3) + (5px * 4) + 20px - 3px);
        }
        .button.height-5.no-padding {
          height: calc((var(--tile-height-mobile, 90px) * 5) + (20px * 4) + (5px * 5) + 20px - 3px);
        }
        .button.height-6.no-padding {
          height: calc((var(--tile-height-mobile, 90px) * 6) + (20px * 5) + (5px * 6) + 20px - 3px);
        }

        .container {
          padding-left:0;
        }
        .header h1 {
          margin-left: 0;
        }
        .header ul {
          margin:0 0 30px 0;
        }
        .header, .card-title, .homekit-card {
          width: 358px;
          text-align: left;
          margin: 0 auto;
        }
        .card-title {
          padding-bottom:0;
          padding-left: 14px;
        }
        homekit-button .name {
          font-size:13px;
          line-height:13px;
        }
        homekit-button .state {
          font-size:13px;
        }
        homekit-button .value.on {
          font-size:10px;
        }
        .row {
          padding:0;
          flex-direction:column;
        }
        .row .col, .row .col.fixed {
          width: auto;
          min-width: auto;
          padding: 0;
        }
      }

      .spin {      
        animation-name: spin;
        animation-duration: 2000ms;
        animation-iteration-count: infinite;
        animation-timing-function: linear; 
      }

      @keyframes spin {
        from {
            transform:rotate(0deg);
        }
        to {
            transform:rotate(360deg);
        }
      }

      .longpress.animate {
        animation-fill-mode: forwards; 
        -webkit-animation: 0.5s longpress forwards;
        animation: 0.5s longpress forwards;
      }
      
      @-webkit-keyframes longpress {
          0%, 20% { transform: scale(1); }
          100% { transform: scale(1.2); }
      }
      
      @keyframes longpress {
          0%, 20% { transform: scale(1); }
          100% { transform: scale(1.2); }
      }
    `}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
